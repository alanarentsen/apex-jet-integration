{
  "name": "oj-validation-group",
  "version": "4.2.0",
  "jetVersion": "4.2.0",
  "displayName": "Validation Group",
  "preview": true,
  "description": "ojValidationGroup",
  "properties": {
    "valid": {
      "description": "The current validity state of the \noj-validation-group element. \n\nThe oj-validation-group's \nvalid property value is calculated from all the \nenabled components it tracks. The most 'invalid' component's\nvalid property value will be\noj-validation-group's valid property value.\nFor example,\nif all the components are valid except one is \"invalidShown\", then oj-validation-group's \nvalid value will be \"invalidShown\". If one is \"invalidShown\" and one is \"invalidHidden\",\nthen oj-validation-group's valid value will be \"invalidShown\" since \"invalidShown\" is more\ninvalid than \"invalidHidden\".\n\n\nWhen any of the enabled tracked component's valid value changes, oj-validation-group will\nbe notified and will update its own valid value if it has changed.\nThere is no default value for the valid property \nsince it is a read-only property that is calculated on initialization\nand kept updated if any of its tracked component's valid value changes.\n\n\nThe oj-validation-group does not filter out components that are hidden.\nHidden components will be considered \nin oj-validation-group's valid calculation as long as they are enabled. \nA hidden enabled component's valid state is no different \nthan a visible enabled component; if there\nis an error that isn't a deferred error, its valid value is \"invalidShown\".\nYou can disable any components you do not want\nconsidered in oj-validation-group's valid value. Note: New valid states may be added to the list of valid values in future releases. If so, we will keep the convention where if it is valid, it will start with \"valid\". If it is invalid, it will start with \"invalid\". If it is pending, it will start with \"pending\".\n",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined. The \"pending\" state is never set in this release of JET. It will be set in a future release.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    }
  },
  "methods": {
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ],
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them on each enabled component. An enabled\ncomponent is one that is not disabled or readonly.\nAs a result, the valid property may be updated; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages(). \n\nIf there were no deferred messages this method simply returns. \n",
      "return": "void"
    },
    "focusOn": {
      "description": "If the parameter passed in is \"@firstInvalidShown\", then\nit sets focus on the first enabled component with invalid messages showing, if any.\nIf nothing is passed in, it will set focus to the first enabled component being tracked, \nif any. An enabled\ncomponent is one that is not disabled or readonly.",
      "params": [
        {
          "name": "key",
          "description": "\"@firstInvalidShown\" will focus on first invalidShown enabled\ncomponent in DOM order, if any. When no parameter is passed in, the method will\nfocus on first enabled component regardless of the valid state, if any. An enabled\ncomponent is one that is not disabled or readonly.",
          "type": "string"
        }
      ],
      "return": "void"
    }
  }
}