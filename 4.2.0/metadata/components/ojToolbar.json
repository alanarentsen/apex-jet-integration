{
  "name": "oj-toolbar",
  "version": "4.2.0",
  "jetVersion": "4.2.0",
  "displayName": "Toolbar",
  "preview": true,
  "roles": [
    "toolbar"
  ],
  "styleClasses": [
    {
      "styleGroup": [
        "oj-toolbar-separator"
      ],
      "description": "Separators should be placed around any buttonsets in the toolbar, and anywhere else in the toolbar that a separator is desirable. For accessibility, additionally apply \"role\" and \"aria-orientation\" as shown."
    },
    {
      "styleGroup": [
        "oj-toolbar-top-border"
      ],
      "description": "Applies a top border to the toolbar, or to the \"oj-toolbars\" element, in themes not having this border by default."
    },
    {
      "styleGroup": [
        "oj-toolbar-bottom-border"
      ],
      "description": "Applies a bottom border to the toolbar, or to the \"oj-toolbars\" element, in themes not having this border by default."
    },
    {
      "styleGroup": [
        "oj-toolbar-no-chrome"
      ],
      "description": "Removes \"chrome\" (background and border) from the toolbar(s), in themes having this chrome by default."
    },
    {
      "styleGroup": [
        "oj-toolbars"
      ],
      "description": "An outer element representing a multiple toolbar layout. Contains one or more \"oj-toolbar-row\" elements."
    },
    {
      "styleGroup": [
        "oj-toolbar-row"
      ],
      "description": "Each \"oj-toolbar-row\" element is a row containing one or more toolbars. These rows go inside an \"oj-toolbars\" element."
    }
  ],
  "description": "Themeable, WAI-ARIA-compliant toolbar element",
  "properties": {
    "chroming": {
      "description": "Indicates in what states the toolbar's buttons and buttonsets have chrome (background and border). This option only affects buttons and buttonsets that have never had their own chroming option set. This allows individual buttons and buttonsets to opt out of their toolbar's chroming if needed. The default chroming varies by theme. Each theme can set its default by setting $toolbarChromingOptionDefault as seen in the example below. Once a value has been set on this option, that value applies regardless of theme.",
      "type": "string",
      "displayName": "Chroming",
      "enumValues": [
        "full",
        "half",
        "outlined"
      ],
      "propertyEditorValues": {
        "full": {
          "description": "In typical themes, full-chrome buttons always have chrome.",
          "displayName": "Full"
        },
        "half": {
          "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states. Half-chroming is recommended for buttons in a toolbar. (This is the toolbar default in most themes.)",
          "displayName": "Half"
        },
        "outlined": {
          "description": "In typical themes, outlined buttons are similar to half-chrome buttons, but have a border in the default state. * @example Initialize the Toolbar with the chroming attribute specified: ",
          "displayName": "Outlined"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object",
      "displayName": "Translations",
      "value": null
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the toolbar, including the following: Re-applies focus management / keyboard navigation. Rechecks the reading direction (LTR vs. RTL). A refresh() is required in the following circumstances: After buttons or buttonsets are added to, removed from, or reordered within the toolbar. After a change to the [disabled]ojButton#disabled status of any of the buttons in the toolbar. After a programmatic change to the checked status of a radio button in the toolbar (which should be done via Buttonset's [checked]ojButtonset#checked option). This applies only to radios, not to checkboxes or push buttons. After the reading direction (LTR vs. RTL) changes. "
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}