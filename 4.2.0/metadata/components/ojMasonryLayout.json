{
  "name": "oj-masonry-layout",
  "version": "4.2.0",
  "jetVersion": "4.2.0",
  "displayName": "Masonry Layout",
  "preview": true,
  "description": "Container element that lays out its children in a grid of tiles.",
  "properties": {
    "reorderHandle": {
      "description": "Specifies the selector of the child DOM element that can be used to reorder the child.",
      "type": "string",
      "displayName": "Reorder Handle",
      "value": null
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object",
      "displayName": "Translations",
      "value": null,
      "properties": {
        "labelCut": {
          "description": "Context menu text used for cutting a tile.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Cut"
        },
        "labelPasteAfter": {
          "description": "Context menu text used for pasting a tile after another tile.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Paste After"
        },
        "labelPasteBefore": {
          "description": "Context menu text used for pasting a tile before another tile.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Paste Before"
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the visual state of the masonryLayout."
    },
    "resizeTile": {
      "description": "Resize a tile.",
      "params": [
        {
          "name": "selector",
          "description": "Selector identifying the tile to resize.",
          "type": "string"
        },
        {
          "name": "sizeStyleClass",
          "description": "New size style class to apply to the tile.",
          "type": "string"
        }
      ]
    },
    "insertTile": {
      "description": "Insert a tile.",
      "params": [
        {
          "name": "selector",
          "description": "Selector identifying the tile to insert. The tile does not need to be a child of the oj-masonry-layout when this method is called. This method will reparent the tile to the oj-masonry-layout.",
          "type": "string"
        },
        {
          "name": "index",
          "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile will be inserted.",
          "type": "number"
        }
      ]
    },
    "removeTile": {
      "description": "Remove a tile.",
      "params": [
        {
          "name": "selector",
          "description": "Selector identifying the tile to remove.",
          "type": "string"
        }
      ]
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Event triggered when the default animation of a particular action is about to start.",
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"insert\" - when a tile is inserted \"move\" - when a tile is moved \"remove\" - when a tile is removed \"resize\" - when a tile is resized \"reorder\" - when a tile is reordered Note that some animation effects may not look appropriate for a given action.",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function after it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Event triggered when the default animation of a particular action has ended.",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"insert\" - when a tile is inserted \"move\" - when a tile is moved \"remove\" - when a tile is removed \"resize\" - when a tile is resized \"reorder\" - when a tile is reordered ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    },
    "ojBeforeInsert": {
      "description": "Event triggered before a tile is inserted.",
      "cancelable": true,
      "detail": {
        "tile": {
          "description": "The tile that is about to be inserted.",
          "type": "Element"
        },
        "index": {
          "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile will be inserted.",
          "type": "number"
        }
      }
    },
    "ojInsert": {
      "description": "Event triggered after a tile is inserted.",
      "detail": {
        "tile": {
          "description": "The tile that was inserted.",
          "type": "Element"
        },
        "index": {
          "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile was inserted.",
          "type": "number"
        }
      }
    },
    "ojBeforeRemove": {
      "description": "Event triggered before a tile is removed.",
      "cancelable": true,
      "detail": {
        "tile": {
          "description": "The tile that will be removed.",
          "type": "Element"
        }
      }
    },
    "ojRemove": {
      "description": "Event triggered after a tile is removed.",
      "detail": {
        "tile": {
          "description": "The tile that was removed.",
          "type": "Element"
        }
      }
    },
    "ojBeforeResize": {
      "description": "Event triggered before a tile is resized.",
      "cancelable": true,
      "detail": {
        "tile": {
          "description": "The tile that will be resized.",
          "type": "Element"
        },
        "previousSizeStyleClass": {
          "description": "The previous size style class applied to the tile.",
          "type": "string"
        },
        "sizeStyleClass": {
          "description": "The new size style class that will be applied to the tile.",
          "type": "string"
        }
      }
    },
    "ojResize": {
      "description": "Event triggered after a tile is resized.",
      "detail": {
        "tile": {
          "description": "The tile that was resized.",
          "type": "Element"
        },
        "previousSizeStyleClass": {
          "description": "The previous size style class applied to the tile.",
          "type": "string"
        },
        "sizeStyleClass": {
          "description": "The new size style class applied to to the tile.",
          "type": "string"
        }
      }
    },
    "ojBeforeReorder": {
      "description": "Event triggered before a tile is reordered.",
      "cancelable": true,
      "detail": {
        "tile": {
          "description": "The tile that will be reordered.",
          "type": "Element"
        },
        "fromIndex": {
          "description": "The 0-based index into the set of rendered oj-masonry-layout children from which the tile will be reordered.",
          "type": "number"
        }
      }
    },
    "ojReorder": {
      "description": "Event triggered after a tile is reordered.",
      "detail": {
        "tile": {
          "description": "The tile that was reordered.",
          "type": "Element"
        },
        "fromIndex": {
          "description": "The 0-based index into the set of rendered oj-masonry-layout children from which the tile was reordered.",
          "type": "number"
        },
        "toIndex": {
          "description": "The 0-based index into the set of rendered oj-masonry-layout children to which the tile was reordered.",
          "type": "number"
        }
      }
    }
  },
  "slots": {
    "": {
      "description": " <oj-masonry-layout> accepts arbitrary direct child elements that can be sized and positioned, which it will lay out as a grid of tiles. Each direct child element must be styled using one of the predefined oj-masonrylayout-tile-CxR style classes to specify the size of that tile. A tile can span multiple columns and/or rows.",
      "displayName": "default"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}