{
  "name": "oj-input-password",
  "version": "4.2.0",
  "jetVersion": "4.2.0",
  "displayName": "Input Password",
  "preview": true,
  "roles": [
    "textbox"
  ],
  "description": "Input Password Element",
  "properties": {
    "autocomplete": {
      "description": "Dictates component's autocomplete state. \nThis attribute indicates whether the value of the control can be automatically \ncompleted by the browser.",
      "type": "string|undefined",
      "displayName": "Autocomplete",
      "value": "on",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "description": "disable autofill",
          "displayName": "Off"
        },
        "on": {
          "description": "enable autofill",
          "displayName": "On"
        }
      }
    },
    "autofocus": {
      "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true \nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component: \nit tells the browser to focus to it when the element is inserted in the document.",
      "type": "boolean|undefined",
      "displayName": "Autofocus",
      "value": false
    },
    "describedBy": {
      "description": "It is used to establish a relationship between this component and another element.\nTypically this is not used by the application developer, but by the oj-label custom element's\ncode. One use case is where the oj-label custom element code writes described-by\non its form component for accessibility reasons.\nTo facilitate correct screen reader behavior, the described-by attribute is\ncopied to the aria-describedby attribute on the component's dom element.",
      "type": "string",
      "displayName": "Described By"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.\n\n\nWhen the disabled property changes due to programmatic \nintervention, the component may clear messages and run validation in some cases. \n\nwhen a required component is initialized as disabled \nvalue=\"{{currentValue}}\" required disabled, \ndeferred validation is skipped.\nwhen a disabled component is enabled, if component is invalid and showing messages then all component messages are cleared, and full validation run using the display value. if there are validation errors, they are shown. if no errors result from the validation, the value property is updated. Page authors can listen to the onValueChanged event to clear custom errors. if component is valid and has no errors then deferred validation is run. if there is a deferred validation error, then the valid property is updated. if component is invalid and deferred errors then component messages are cleared and deferred validation re-run. if there is a deferred validation error, then the valid property is updated. \n\nwhen enabled component is disabled then no validation is run and the component appears \ndisabled.\n\n",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false
    },
    "displayOptions": {
      "description": "Display options for auxilliary content that determines where it should be displayed \nin relation to the component. \n\n\nThe types of messaging content for which display options can be configured include \nmessages, converterHint, \nvalidatorHint and helpInstruction.\nThe display options for each type is specified either as an array of strings or a string. When \nan array is specified the first display option takes precedence over the second and so on. \n\n\nJET editable components set defaults that apply to the entire app/page. \nIt is possible to override the defaults on \na per instance basis as explained in the examples below or change defaults for the entire\napplication using \noj.Components#setDefaultOptions method.\nIt is much easier to change the defaults using setDefaultOptions once rather than putting\nthe displayOptions option on every component instance.\n\n\nWhen display-options changes due to programmatic intervention, the component updates its \ndisplay to reflect the updated choices. For example, if 'help.instruction' property goes from \n'notewindow' to 'none' then it no longer shows in the notewindow.\n\n\nA side note: help.instruction and message detail text can include formatted HTML text, whereas hints and \nmessage summary text cannot. If you use formatted text, it should be accessible \nand make sense to the user if formatting wasn't there.\nTo format the help.instruction, you could do this:\n<html>Enter <b>at least</b> 6 characters</html>\n",
      "type": "Object|undefined",
      "displayName": "Display Options",
      "value": {
        "messages": [
          "inline"
        ],
        "converterHint": [
          "placeholder",
          "notewindow"
        ],
        "validatorHint": [
          "notewindow"
        ],
        "helpInstruction": [
          "notewindow"
        ]
      },
      "properties": {
        "converterHint": {
          "description": "supported values are 'placeholder', \n'notewindow', 'none'. The \ndefault value is ['placeholder', 'notewindow']. When there \nis already a placeholder set on the component, the converter hint falls back to display \ntype of 'notewindow'.\nTo change the default value you can do this - \nE.g. {'displayOptions: {'converterHint': ['none']}}",
          "type": "Array|string"
        },
        "validatorHint": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \n{'displayOptions: {'validatorHint': ['none']}}",
          "type": "Array|string"
        },
        "messages": {
          "description": "supported values are 'notewindow', \n'inline',\n'none'. The default is 'inline'. \nTo change the default value you can do this - \nE.g. {'displayOptions: {'messages': 'none'}}",
          "type": "Array|string"
        },
        "helpInstruction": {
          "description": "supported values are 'notewindow', \n'none'.\nTo change the default value you can do this - \nE.g. displayOptions='{\"helpInstruction\": \"none\"}'",
          "type": "Array|string"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "Object.<string, string>",
      "displayName": "Help",
      "value": {
        "help": {
          "instruction": null
        }
      },
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is null.",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for oj-form-layout element to render help information on the label of the editable component. \nThis is used only if the editable component is added as a direct child to an oj-form-layout element, and the labelHint property is also specified.\n\n\nThe helpHints object contains a definition property and a source property.\n\n\ndefinition - hint for help definition text.\nsource - hint for help source URL.\n",
      "type": "Object.<string, string>",
      "displayName": "Help Hints",
      "value": {
        "definition": "",
        "source": ""
      },
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label. \nIt is what shows up when the user hovers over the help icon, or tabs into the help icon, or press and holds the help icon on a mobile device. No formatted text is available for help definition attribute.\n\nSee the help-hints attribute for usage examples.",
          "type": "string"
        },
        "source": {
          "description": "Hint for help source URL associated with the label. \nIf present, a help icon will render next to the label. For security reasons we only support urls with protocol http: or https:. If the url doesn't comply we ignore it and throw an error. \nPass in an encoded URL since we do not encode the URL.\n\nSee the help-hints attribute for usage examples.",
          "type": "string"
        }
      }
    },
    "inputmode": {
      "description": "Dictates component's inputmode. \nIt specifies a hint to the browser for which keyboard to display.",
      "type": "string|undefined",
      "displayName": "Inputmode",
      "value": "latin",
      "enumValues": [
        "email",
        "full-width-latin",
        "kana",
        "katakana",
        "latin",
        "latin-name",
        "latin-prose",
        "numeric",
        "tel",
        "url",
        "verbatim"
      ],
      "propertyEditorValues": {
        "email": {
          "description": "Email input",
          "displayName": "Email"
        },
        "full-width-latin": {
          "description": "As latin-prose, but for the user's secondary languages",
          "displayName": "Full-width-latin"
        },
        "kana": {
          "description": "Kana or romaji input",
          "displayName": "Kana"
        },
        "katakana": {
          "description": "Katakana input",
          "displayName": "Katakana"
        },
        "latin": {
          "description": "Latin-script input",
          "displayName": "Latin"
        },
        "latin-name": {
          "description": "As latin, but for human names",
          "displayName": "Latin-name"
        },
        "latin-prose": {
          "description": "As latin, but with more aggressive typing aids",
          "displayName": "Latin-prose"
        },
        "numeric": {
          "description": "Numeric input",
          "displayName": "Numeric"
        },
        "tel": {
          "description": "Telephone input",
          "displayName": "Tel"
        },
        "url": {
          "description": "URL input",
          "displayName": "Url"
        },
        "verbatim": {
          "description": "Alphanumeric",
          "displayName": "Verbatim"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component. \nThis is used only if the editable component is added as a direct child to an oj-form-layout element.\n\n\nWhen labelHint is present it gives a hint to the oj-form-layout element to create an oj-label element for the editable component.\nWhen the labelHint property changes oj-form-layout element refreshes to \ndisplay the updated label information. \n",
      "type": "string",
      "displayName": "Label Hint"
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component when it has business/custom validation \nerrors that it wants the component to show. When this option is set the message shows to the \nuser right away. To clear the custom message, set messagesCustom\nback to an empty array.\nEach message in the array is an object that duck types oj.Message. \nSee Message for details.\n\n\nSee the Validation and Messages section\nfor details on when the component clears messagesCustom; \nfor example, when full validation is run.\n",
      "type": "Array.<Object>|undefined",
      "displayName": "Messages Custom",
      "value": "[]",
      "writeback": true
    },
    "name": {
      "description": "It indicates the name of the component.",
      "type": "string|undefined",
      "displayName": "Name"
    },
    "placeholder": {
      "description": "The placeholder text to set on the element.",
      "type": "string|null|undefined",
      "displayName": "Placeholder"
    },
    "rawValue": {
      "description": "The raw-value is the read-only attribute for retrieving \nthe current value from the input field in text form.\n\nThe raw-value updates on the 'input' javascript event, \nso the raw-value changes as the value of the input is changed. \nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2', \n..., and finally '1,200'. Then when the user blurs or presses \nEnter the value property gets updated.\n\nThis is a read-only attribute so page authors cannot set or change it directly.",
      "type": "string|undefined",
      "displayName": "Raw Value",
      "writeback": true,
      "readOnly": true
    },
    "readonly": {
      "description": "Dictates component's readonly state.",
      "type": "boolean|undefined",
      "displayName": "Readonly",
      "value": false
    },
    "required": {
      "description": "Whether the component is required or optional. When required is set to true, an implicit \nrequired validator is created using the validator factory - \noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute \nand the label associated with the component, are passed through to the options parameter of the \ncreateValidator method. \n\n\nWhen required property changes due to programmatic intervention, \nthe component may clear messages and run validation, based on the current state it's in. \nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on \nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then \ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then \ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n",
      "type": "boolean",
      "displayName": "Required",
      "value": false,
      "enumValues": [
        "false",
        "true"
      ],
      "propertyEditorValues": {
        "false": {
          "description": "implies a value is not required to be provided by the user. \nThis is the default.",
          "displayName": "False"
        },
        "true": {
          "description": "implies a value is required to be provided by user and the \ninput's label will render a required icon. Additionally a required validator - \nRequiredValidator - is implicitly used if no explicit required validator is set. \nAn explicit required validator can be set by page authors using the validators attribute.",
          "displayName": "True"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object",
      "displayName": "Translations",
      "value": null,
      "properties": {
        "regexp": {
          "description": "Provides properties to customize the message text used by the\nimplicit regexp validator associated to the InputPassword component.\n\nSee the translations attribute for usage examples.",
          "type": "Object",
          "properties": {
            "messageDetail": {
              "description": "Provides properties to customize the error message detail used by the\nimplicit regexp validator associated to the InputPassword component.\n\nSee the translations attribute for usage examples.",
              "type": "Object"
            },
            "messageSummary": {
              "description": "Provides properties to customize the error message summary used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
              "type": "Object"
            }
          }
        },
        "required": {
          "description": "Provides properties to customize the summary, detail and hint text used by the\nimplicit required validator associated to any editable component that supports the\nrequired option.\n\nSee the translations attribute and\nrequired option for usage examples.",
          "type": "Object",
          "properties": {
            "hint": {
              "description": "Hint text used by required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string"
            },
            "messageDetail": {
              "description": "Message text that describes the details of the required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string"
            },
            "messageSummary": {
              "description": "Message text for summarizing a required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string"
            }
          }
        }
      }
    },
    "valid": {
      "description": " \nThe current valid state of the component. It is evaluated on initial render.\nIt is re-evaluated after validation is run (full or deferred) when messagesCustom is updated, since messagesCustom can be added by the app developer any time. when showMessages() is called. Since showMessages() moves the hidden messages into messages shown, if the valid state was \"invalidHidden\" then it would become \"invalidShown\". when the required property has changed. If a component is empty and has required set, the valid state may be \"invalidHidden\" (if no invalid messages are being shown as well). If required property is removed, the valid state would change to \"valid\". Note: New valid states may be added to the list of valid values in future releases. Any new values will start with \"invalid\" if it is an invalid state, \"pending\" if it is pending state, and \"valid\" if it is a valid state.\n",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "preview": true,
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is never set in this release of JET. It will be set in a future release.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "validators": {
      "description": "List of validators used by component when performing validation. Each item is either an \ninstance that duck types Validator, or is an Object literal containing the \nproperties listed below. Implicit validators created by a component when certain attributes \nare present (e.g. required attribute), are separate from \nvalidators specified through this attribute. At runtime when the component runs validation, it \ncombines the implicit validators with the list specified through this attribute. \n\nHints exposed by validators are shown in the notewindow by default, or as determined by the \n'validatorHint' property set on the display-options \nattribute. \n\n\n\nWhen validators property changes due to programmatic \nintervention, the component may decide to clear messages and run validation, based on the \ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to \nmessaging. E.g., notewindow displays the new hint(s). \nRunning Validation\n\nif component is valid when validators changes, component does nothing other than the \nsteps it always performs.\nif component is invalid and is showing messages when \nvalidators changes then all component messages are cleared \nand full validation run using the display value on the component. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when validators changes, it does \nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n",
      "type": "Array|undefined",
      "displayName": "Validators",
      "properties": {
        "type": {
          "description": "the validator type that has a ValidatorFactory that can \nbe retrieved using the Validation module. For a list of supported validators refer \nto ValidatorFactory. \nE.g., {validators: [{type: 'regExp'}]}",
          "type": "string"
        },
        "options": {
          "description": "optional Object literal of options that the validator expects. \n\nE.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
          "type": "Object"
        }
      }
    },
    "value": {
      "description": "The value of the component. \n\n\nWhen value property changes due to programmatic \nintervention, the component always clears all messages\nincluding messagesCustom, runs deferred validation, and \nalways refreshes UI display value.\n\nRunning Validation\n\ncomponent always runs deferred validation; the \nvalid property is updated with the result.\n\n",
      "type": "Object|undefined",
      "displayName": "Value",
      "value": null,
      "writeback": true
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the component. Usually called after dom changes have been made."
    },
    "validate": {
      "description": "Validates the component's display value using the converter and all validators registered on \nthe component and updates the value option by performing the \nfollowing steps. \nAll messages are cleared, including custom messages added by the app. \nIf no converter is present then processing continues to next step. If a converter is \npresent, the UI value is first converted (i.e., parsed). If there is a parse error then \nthe messages are shown.\nIf there are no validators setup for the component the value \noption is updated using the display value. Otherwise all \nvalidators are run in sequence using the parsed value from the previous step. The implicit \nrequired validator is run first if the component is marked required. When a validation error is \nencountered it is remembered and the next validator in the sequence is run. \nAt the end of validation if there are errors, the messages are shown. \nIf there were no errors, then the \nvalue option is updated.\n",
      "preview": true,
      "return": "Promise"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes - \nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be \nerased when this method is called."
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them. \nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages(). \n\nIf there were no deferred messages this method simply returns. \n"
    },
    "focus": {
      "description": "Sets focus on the element that naturally gets focus. For example, this would be the input \nelement for input type components. ",
      "return": "undefined"
    },
    "blur": {
      "description": "Blurs the element that naturally gets focus. For example, this would be the input \nelement for input type components. ",
      "return": "undefined"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}