{
  "name": "oj-chart",
  "version": "4.2.0",
  "jetVersion": "4.2.0",
  "displayName": "Chart",
  "preview": true,
  "roles": [
    "application"
  ],
  "description": "Chart Element",
  "properties": {
    "animationOnDataChange": {
      "description": "Defines the animation that is applied on data changes. Animation is automatically disabled when there are a large number of data items.",
      "type": "string",
      "displayName": "Animation On Data Change",
      "value": "none",
      "enumValues": [
        "auto",
        "none",
        "slideToLeft",
        "slideToRight"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        },
        "slideToLeft": {
          "displayName": "Slide To Left"
        },
        "slideToRight": {
          "displayName": "Slide To Right"
        }
      }
    },
    "animationOnDisplay": {
      "description": "Defines the animation that is shown on initial display. Animation is automatically disabled when there are a large number of data items.",
      "type": "string",
      "displayName": "Animation On Display",
      "value": "none",
      "enumValues": [
        "alphaFade",
        "auto",
        "none",
        "zoom"
      ],
      "propertyEditorValues": {
        "alphaFade": {
          "displayName": "Alpha Fade"
        },
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        },
        "zoom": {
          "displayName": "Zoom"
        }
      }
    },
    "coordinateSystem": {
      "description": "The coordinate system of the chart. Only applies to bar, line, area, combo, scatter, and bubble charts.",
      "type": "string",
      "displayName": "Coordinate System",
      "value": "cartesian",
      "enumValues": [
        "cartesian",
        "polar"
      ],
      "propertyEditorValues": {
        "cartesian": {
          "displayName": "Cartesian"
        },
        "polar": {
          "displayName": "Polar"
        }
      }
    },
    "data": {
      "description": "An object with the following properties, used to define the series and groups when using a DataProvider to provide data to the chart. Also accepts a Promise for deferred data rendering.",
      "type": "object|Promise",
      "displayName": "Data",
      "value": null,
      "properties": {
        "groups": {
          "description": "An oj.DataProvider that generates rows of ChartGroup typed objects.",
          "type": "oj.DataProvider.<String, oj.ojChart.ChartGroup>",
          "value": null
        },
        "series": {
          "description": "An array of ChartSeries typed objects. Used when utilizing a DataProvider to provide data to the chart. Only a single series is supported for stock charts. Also accepts a Promise for deferred data rendering.",
          "type": "Array.<oj.ojChart.ChartSeries>|Promise.<Array>",
          "value": null
        }
      }
    },
    "dataCursor": {
      "description": "Defines whether the data cursor is enabled. If set to \"auto\", the data cursor is shown only for line or area charts on touch devices. The data cursor is not shown when the tooltip is null and it is not supported on polar charts.",
      "type": "string",
      "displayName": "Data Cursor",
      "value": "auto",
      "enumValues": [
        "auto",
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "dataCursorBehavior": {
      "description": "Defines the behavior of the data cursor when moving between data items.",
      "type": "string",
      "displayName": "Data Cursor Behavior",
      "value": "auto",
      "enumValues": [
        "auto",
        "smooth",
        "snap"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "smooth": {
          "displayName": "Smooth"
        },
        "snap": {
          "displayName": "Snap"
        }
      }
    },
    "dataCursorPosition": {
      "description": "Speficies the position of the data cursor. Used for synchronizing data cursors across multiple charts. Null if the data cursor is not displayed.",
      "type": "object",
      "displayName": "Data Cursor Position",
      "value": null,
      "writeback": true,
      "properties": {
        "x": {
          "description": "The x value of the data cursor.",
          "type": "number|string",
          "value": null
        },
        "y": {
          "description": "The y value of the data cursor. If both y and y2 are defined, y will take precedence.",
          "type": "number",
          "value": null
        },
        "y2": {
          "description": "The y2 value of the data cursor. If both y and y2 are defined, y will take precedence.",
          "type": "number",
          "value": null
        }
      }
    },
    "dataLabel": {
      "description": "A function that returns a custom data label. The function takes a dataContext argument, provided by the chart, with the following properties: id: The id of the data item. series: The id of the series the data item belongs to. group: The id or an array of ids of the group(s) the data item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids. value, targetValue, x, y, z, low, high, open, close, volume: The values of the data item. label: The label for the data item if the dataLabel callback is ignored. The dataLabel callback can concatenate this with another string to easily enhance the default label. totalValue: The total of all values in the chart. This will only be included for pie charts. data: The data object of the data item. For nested items, it will be an array containing the parent item data and nested item data. seriesData: The data for the series the data item belongs to. groupData: An array of data for the group the data item belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the data item. componentElement: The chart element. The function may return a number or a string or in the case of range charts, an array of numbers or strings. If any label is a number, it will be formatted by the valueFormat of the type 'label' before being used as labels.",
      "type": "function",
      "displayName": "Data Label",
      "value": null
    },
    "dnd": {
      "description": "Provides support for HTML5 Drag and Drop events. Please refer to third party documentation on HTML5 Drag and Drop to learn how to use it.",
      "type": "object",
      "displayName": "Dnd",
      "value": {},
      "properties": {
        "drag": {
          "description": "An object that describes drag functionality.",
          "type": "object",
          "value": {},
          "properties": {
            "groups": {
              "description": "Allows dragging of chart groups from the categorical axis labels.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed. For example, if selected employee data items are being dragged, dataTypes could be \"application/employees+json\". Drop targets can examine the data types and decide whether to accept the data. For each type in the array, dataTransfer.setData will be called with the specified type and the data. The data is an array of the dataContexts of the selected groups. The dataContext is the JSON version of the dataContext that we use for \"tooltip\" and \"dataLabels\" properties, excluding componentElement and parentElement. This property is required unless the application calls setData itself in a dragStart callback function.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "drag": {
                  "description": "An optional callback function that receives the \"drag\" event as argument.",
                  "type": "function",
                  "value": null
                },
                "dragEnd": {
                  "description": "An optional callback function that receives the \"dragend\" event as argument.",
                  "type": "function",
                  "value": null
                },
                "dragStart": {
                  "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. The context information is as follows: groups {Array.(object)}: An array of dataContexts of the dragged groups. The dataContext is the same as what we use for \"tooltip\" and \"dataLabels\" properties. This function can set its own data and drag image as needed. When this function is called, event.dataTransfer is already populated with the default data and drag image.",
                  "type": "function",
                  "value": null
                }
              }
            },
            "items": {
              "description": "Allows dragging of chart data items, including bars, line/area/scatter markers, bubbles, and pie/funnel/pyramid slices.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed. For example, if selected employee data items are being dragged, dataTypes could be \"application/employees+json\". Drop targets can examine the data types and decide whether to accept the data. For each type in the array, dataTransfer.setData will be called with the specified type and the data. The data is an array of the dataContexts of the selected data items. The dataContext is the JSON version of the dataContext that we use for \"tooltip\" and \"dataLabels\" properties, excluding componentElement and parentElement. This property is required unless the application calls setData itself in a dragStart callback function.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "drag": {
                  "description": "An optional callback function that receives the \"drag\" event as argument.",
                  "type": "function",
                  "value": null
                },
                "dragEnd": {
                  "description": "An optional callback function that receives the \"dragend\" event as argument.",
                  "type": "function",
                  "value": null
                },
                "dragStart": {
                  "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. The context information is as follows: item {Array.(object)}: An array of dataContexts of the dragged data items. The dataContext is the same as what we use for \"tooltip\" and \"dataLabels\" properties. This function can set its own data and drag image as needed. When this function is called, event.dataTransfer is already populated with the default data and drag image.",
                  "type": "function",
                  "value": null
                }
              }
            },
            "series": {
              "description": "Allows dragging of chart series from the legend items.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed. For example, if selected employee data items are being dragged, dataTypes could be \"application/employees+json\". Drop targets can examine the data types and decide whether to accept the data. For each type in the array, dataTransfer.setData will be called with the specified type and the data. The data is an array of the dataContexts of the selected series. The dataContext is the JSON version of the dataContext that we use for \"tooltip\" and \"dataLabels\" properties, excluding componentElement and parentElement. This property is required unless the application calls setData itself in a dragStart callback function.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "drag": {
                  "description": "An optional callback function that receives the \"drag\" event as argument.",
                  "type": "function",
                  "value": null
                },
                "dragEnd": {
                  "description": "An optional callback function that receives the \"dragend\" event as argument.",
                  "type": "function",
                  "value": null
                },
                "dragStart": {
                  "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. The context information is as follows: series {Array.(object)}: An array of dataContexts of the dragged series. The dataContext is the same as what we use for \"tooltip\" and \"dataLabels\" properties. This function can set its own data and drag image as needed. When this function is called, event.dataTransfer is already populated with the default data and drag image.",
                  "type": "function",
                  "value": null
                }
              }
            }
          }
        },
        "drop": {
          "description": "An object that describes drop functionality.",
          "type": "object",
          "value": {},
          "properties": {
            "legend": {
              "description": "Allows dropping on the legend.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "dragEnter": {
                  "description": "An optional callback function that receives the \"dragenter\" event and empty context information as arguments. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "dragLeave": {
                  "description": "An optional callback function that receives the \"dragleave\" event and empty context information as arguments.",
                  "type": "function",
                  "value": null
                },
                "dragOver": {
                  "description": "An optional callback function that receives the \"dragover\" event and empty context information as arguments. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "drop": {
                  "description": "An optional callback function that receives the \"drop\" event and emtpy context information as arguments. This function should call event.preventDefault() to indicate the dragged data can be accepted.",
                  "type": "function",
                  "value": null
                }
              }
            },
            "plotArea": {
              "description": "Allows dropping on the plot area.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "dragEnter": {
                  "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. y {number}: The Y axis value at the event position. y2 {number}: The Y2 axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "dragLeave": {
                  "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. y {number}: The Y axis value at the event position. y2 {number}: The Y2 axis value at the event position. ",
                  "type": "function",
                  "value": null
                },
                "dragOver": {
                  "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. y {number}: The Y axis value at the event position. y2 {number}: The Y2 axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "drop": {
                  "description": "An optional callback function that receives the \"drop\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. y {number}: The Y axis value at the event position. y2 {number}: The Y2 axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted.",
                  "type": "function",
                  "value": null
                }
              }
            },
            "xAxis": {
              "description": "Allows dropping on the X axis.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "dragEnter": {
                  "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "dragLeave": {
                  "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. ",
                  "type": "function",
                  "value": null
                },
                "dragOver": {
                  "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "drop": {
                  "description": "An optional callback function that receives the \"drop\" event and context information as arguments. The context information is as follows: x {number}: The X axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted.",
                  "type": "function",
                  "value": null
                }
              }
            },
            "y2Axis": {
              "description": "Allows dropping on the Y2 axis.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "dragEnter": {
                  "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. The context information is as follows: y2 {number}: The Y2 axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "dragLeave": {
                  "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. The context information is as follows: y2 {number}: The Y2 axis value at the event position. ",
                  "type": "function",
                  "value": null
                },
                "dragOver": {
                  "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. The context information is as follows: y2 {number}: The Y2 axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "drop": {
                  "description": "An optional callback function that receives the \"drop\" event and context information as arguments. The context information is as follows: y2 {number}: The Y2 axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted.",
                  "type": "function",
                  "value": null
                }
              }
            },
            "yAxis": {
              "description": "Allows dropping on the Y axis.",
              "type": "object",
              "value": {},
              "properties": {
                "dataTypes": {
                  "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array.<string>",
                  "value": null
                },
                "dragEnter": {
                  "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. The context information is as follows: y {number}: The Y axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "dragLeave": {
                  "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. The context information is as follows: y {number}: The Y axis value at the event position. ",
                  "type": "function",
                  "value": null
                },
                "dragOver": {
                  "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. The context information is as follows: y {number}: The Y axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function",
                  "value": null
                },
                "drop": {
                  "description": "An optional callback function that receives the \"drop\" event and context information as arguments. The context information is as follows: y {number}: The Y axis value at the event position. This function should call event.preventDefault() to indicate the dragged data can be accepted.",
                  "type": "function",
                  "value": null
                }
              }
            }
          }
        }
      }
    },
    "dragMode": {
      "description": "The action that is performed when a drag occurs on the chart. Pan and marquee zoom are only available if zoom and scroll is turned on. Marquee select is only available if multiple selection is turned on. If the value is set to \"user\" and multiple actions are available, buttons will be displayed on the plot area to let users switch between modes.",
      "type": "string",
      "displayName": "Drag Mode",
      "value": "user",
      "enumValues": [
        "off",
        "pan",
        "select",
        "user",
        "zoom"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "pan": {
          "displayName": "Pan"
        },
        "select": {
          "displayName": "Select"
        },
        "user": {
          "displayName": "User"
        },
        "zoom": {
          "displayName": "Zoom"
        }
      }
    },
    "drilling": {
      "description": "Whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). Use \"on\" to enable drilling for all series objects (legend items), group objects (x-axis labels), and data items. Use \"seriesOnly\" or \"groupsOnly\" to enable drilling for series objects or group objects only. To enable or disable drilling on individual series, group, or data item, use the drilling attribute in each series, group, or data item.",
      "type": "string",
      "displayName": "Drilling",
      "value": "off",
      "enumValues": [
        "groupsOnly",
        "off",
        "on",
        "seriesOnly"
      ],
      "propertyEditorValues": {
        "groupsOnly": {
          "displayName": "Groups Only"
        },
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        },
        "seriesOnly": {
          "displayName": "Series Only"
        }
      }
    },
    "groups": {
      "description": "An array of strings identifying the group labels, or an array of objects with the following properties. Also accepts a Promise for deferred data rendering.",
      "type": "Array.<object>|Array.<string>|Promise",
      "displayName": "Groups",
      "value": null,
      "properties": {
        "drilling": {
          "description": "Whether drilling is enabled on the group label. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click. To enable drilling for all group labels at once, use the drilling attribute in the top level.",
          "type": "string",
          "value": "inherit",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "groups": {
          "description": "An array of nested group objects.",
          "type": "Array.<string>|Array.<object>",
          "value": null
        },
        "id": {
          "description": "The id of the group. Defaults to the name if not specified.",
          "type": "string",
          "value": null
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the group label text and only applies to a categorical axis.",
          "type": "object",
          "value": null
        },
        "name": {
          "description": "The name of the group.",
          "type": "string",
          "value": null
        },
        "shortDesc": {
          "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
          "type": "string",
          "value": null,
          "translatable": true
        }
      }
    },
    "hiddenCategories": {
      "description": "An array of category strings used for filtering. Series or data items with any category matching an item in this array will be filtered.",
      "type": "Array.<string>",
      "displayName": "Hidden Categories",
      "value": "[]",
      "writeback": true
    },
    "hideAndShowBehavior": {
      "description": "Defines the hide and show behavior that is performed when clicking on a legend item. When data items are hidden, the y axes can be optionally rescaled to fit to the remaining data.",
      "type": "string",
      "displayName": "Hide And Show Behavior",
      "value": "none",
      "enumValues": [
        "none",
        "withRescale",
        "withoutRescale"
      ],
      "propertyEditorValues": {
        "none": {
          "displayName": "None"
        },
        "withRescale": {
          "displayName": "With Rescale"
        },
        "withoutRescale": {
          "displayName": "Without Rescale"
        }
      }
    },
    "highlightMatch": {
      "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
      "type": "string",
      "displayName": "Highlight Match",
      "value": "all",
      "enumValues": [
        "all",
        "any"
      ],
      "propertyEditorValues": {
        "all": {
          "displayName": "All"
        },
        "any": {
          "displayName": "Any"
        }
      }
    },
    "highlightedCategories": {
      "description": "An array of category strings used for highlighting. Series or data items matching all categories in this array will be highlighted.",
      "type": "Array.<string>",
      "displayName": "Highlighted Categories",
      "value": "[]",
      "writeback": true
    },
    "hoverBehavior": {
      "description": "Defines the behavior applied when hovering over data items.",
      "type": "string",
      "displayName": "Hover Behavior",
      "value": "none",
      "enumValues": [
        "dim",
        "none"
      ],
      "propertyEditorValues": {
        "dim": {
          "displayName": "Dim"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "initialZooming": {
      "description": "Whether automatic initial zooming is enabled. The valid values are \"first\" to initially zoom to the first data points (after the viewportMin) that can fit in the plot area, \"last\" to initially zoom to the last data points (before the viewportMax), and \"none\" to disable initial zooming. Only applies to bar, line, area, and combo charts with zoomAndScroll turned on.",
      "type": "string",
      "displayName": "Initial Zooming",
      "value": "none",
      "enumValues": [
        "first",
        "last",
        "none"
      ],
      "propertyEditorValues": {
        "first": {
          "displayName": "First"
        },
        "last": {
          "displayName": "Last"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "legend": {
      "description": "An object defining the style, positioning, and behavior of the legend.",
      "type": "object",
      "displayName": "Legend",
      "value": {},
      "properties": {
        "backgroundColor": {
          "description": "The color of the legend background.",
          "type": "string",
          "value": null
        },
        "borderColor": {
          "description": "The border color of the legend.",
          "type": "string",
          "value": null
        },
        "maxSize": {
          "description": "Defines the maximum size of the legend in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "position": {
          "description": "The position of the legend within the chart. By default, the legend will be placed on the side or bottom, based on the size of the chart and the legend contents.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "bottom",
            "end",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "bottom": {
              "displayName": "Bottom"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "referenceObjectSection": {
          "description": "An object with the following properties for the reference object section in the legend.",
          "type": "object",
          "value": {},
          "properties": {
            "title": {
              "description": "The title of the reference object section.",
              "type": "string",
              "value": null,
              "translatable": true
            },
            "titleHalign": {
              "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
              "type": "string",
              "value": "start",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the section title.",
              "type": "object",
              "value": {}
            }
          }
        },
        "rendered": {
          "description": "Defines whether the legend is displayed. If set to auto, the legend will be hidden for charts with a large number of series. To turn on legend for stock, funnel and pyramid charts, set the displayInLegend property for the series items to 'on'.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "scrolling": {
          "description": "Defines whether scrolling is enabled for the legend.",
          "type": "string",
          "value": "asNeeded",
          "enumValues": [
            "asNeeded",
            "off"
          ],
          "propertyEditorValues": {
            "asNeeded": {
              "displayName": "As Needed"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "sections": {
          "description": "An array of objects with the following properties defining the additional legend sections, other than the default series and reference object sections.",
          "type": "Array.<object>",
          "value": "[]",
          "properties": {
            "items": {
              "description": "An array of objects with the following properties defining the legend items. Also accepts a Promise for deferred data rendering.",
              "type": "Array.<object>|Promise",
              "value": null,
              "properties": {
                "borderColor": {
                  "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                  "type": "string",
                  "value": null
                },
                "categories": {
                  "description": "An array of categories for the legend item. Legend items currently only support a single category. If no category is specified, this defaults to the id or text of the legend item.",
                  "type": "Array.<string>",
                  "value": null
                },
                "categoryVisibility": {
                  "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
                  "type": "string",
                  "value": "visible",
                  "enumValues": [
                    "hidden",
                    "visible"
                  ],
                  "propertyEditorValues": {
                    "hidden": {
                      "displayName": "Hidden"
                    },
                    "visible": {
                      "displayName": "Visible"
                    }
                  }
                },
                "color": {
                  "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
                  "type": "string",
                  "value": null
                },
                "id": {
                  "description": "The id of the legend item, which is provided as part of the context for events fired by this chart. If not specified, the id defaults to the text of the legend item.",
                  "type": "string",
                  "value": null
                },
                "lineStyle": {
                  "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                  "type": "string",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                  "type": "number",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
                  "type": "string",
                  "value": null
                },
                "markerShape": {
                  "description": "The shape of the marker. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. The legend will style the custom shapes the same way as built-in shapes, supporting properties like color and borderColor and applying hover and filter effects. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                  "type": "string",
                  "value": "square",
                  "enumValues": [
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "rectangle",
                    "square",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ],
                  "propertyEditorValues": {
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "pattern": {
                  "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                  "type": "string",
                  "value": "none",
                  "enumValues": [
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "none",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "largeChecker": {
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "displayName": "Large Triangle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "smallChecker": {
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "shortDesc": {
                  "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
                  "type": "string",
                  "value": null
                },
                "source": {
                  "description": "The URI of the image of the legend symbol.",
                  "type": "string",
                  "value": null
                },
                "symbolType": {
                  "description": "The type of legend symbol to display.",
                  "type": "string",
                  "value": "marker",
                  "enumValues": [
                    "image",
                    "line",
                    "lineWithMarker",
                    "marker"
                  ],
                  "propertyEditorValues": {
                    "image": {
                      "displayName": "Image"
                    },
                    "line": {
                      "displayName": "Line"
                    },
                    "lineWithMarker": {
                      "displayName": "Line With Marker"
                    },
                    "marker": {
                      "displayName": "Marker"
                    }
                  }
                },
                "text": {
                  "description": "The legend item text.",
                  "type": "string",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "sections": {
              "description": "An array of nested legend sections.",
              "type": "Array.<object>",
              "value": null
            },
            "title": {
              "description": "The title of the legend section.",
              "type": "string",
              "value": null,
              "translatable": true
            },
            "titleHalign": {
              "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
              "type": "string",
              "value": "start",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the section title.",
              "type": "object",
              "value": null
            }
          }
        },
        "seriesSection": {
          "description": "An object with the following properties for the series section in the legend.",
          "type": "object",
          "value": {},
          "properties": {
            "title": {
              "description": "The title of the series section.",
              "type": "string",
              "value": null,
              "translatable": true
            },
            "titleHalign": {
              "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
              "type": "string",
              "value": "start",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the section title.",
              "type": "object",
              "value": {}
            }
          }
        },
        "size": {
          "description": "Defines the size of the legend in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "symbolHeight": {
          "description": "The height of the legend symbol (line or marker) in pixels.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "symbolWidth": {
          "description": "The width of the legend symbol (line or marker) in pixels.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "textStyle": {
          "description": "The CSS style object defining the style of the legend text.",
          "type": "object",
          "value": {}
        },
        "title": {
          "description": "The legend title.",
          "type": "string",
          "value": null,
          "translatable": true
        },
        "titleHalign": {
          "description": "The horizontal alignment of the title.",
          "type": "string",
          "value": "start",
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "titleStyle": {
          "description": "The CSS style object defining the style of the title.",
          "type": "object",
          "value": {}
        }
      }
    },
    "orientation": {
      "description": "The chart orientation. Only applies to bar, line, area, combo, box plot, and funnel charts.",
      "type": "string",
      "displayName": "Orientation",
      "value": "vertical",
      "enumValues": [
        "horizontal",
        "vertical"
      ],
      "propertyEditorValues": {
        "horizontal": {
          "displayName": "Horizontal"
        },
        "vertical": {
          "displayName": "Vertical"
        }
      }
    },
    "otherThreshold": {
      "description": "Specifies the fraction of the whole pie under which a slice would be aggregated into an \"Other\" slice. Valid values range from 0 (default) to 1. For example, a value of 0.1 would cause all slices which are less than 10% of the pie to be aggregated into the \"Other\" slice. Only applies to pie chart.",
      "type": "number",
      "displayName": "Other Threshold",
      "value": 0,
      "maximum": 1,
      "minimum": 0
    },
    "overview": {
      "description": "An object defining the overview scrollbar. Only applies if zoomAndScroll is not off. Currently only supported for vertical bar, line, area, stock, and combo charts.",
      "type": "object",
      "displayName": "Overview",
      "value": {},
      "properties": {
        "content": {
          "description": "An object containing the property override for the overview chart. The API is the same as the chart property API, and the property provided here will be merged on top of the default property of the overview chart. This can be used to customize the style or the type of the overview chart.",
          "type": "object",
          "value": {}
        },
        "height": {
          "description": "Specifies the height of the overview scrollbar in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "rendered": {
          "description": "Specifies whether the overview scrollbar is rendered. If not, simple scrollbar will be used.",
          "type": "string",
          "value": "off",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        }
      }
    },
    "pieCenter": {
      "description": "An object defining the center content of a pie chart. Either a label can be displayed at the center of the pie chart or custom HTML content.",
      "type": "object",
      "displayName": "Pie Center",
      "value": {},
      "properties": {
        "converter": {
          "description": "The converter (an object literal or instance that duck types oj.Converter) to format the label if it is numeric. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
          "type": "object",
          "value": null
        },
        "label": {
          "description": "Specifies the text for the label. When a innerRadius is specified, the label will automatically be scaled to fit within the inner circle. If the innerRadius is 0, the default font size will be used.",
          "type": "string",
          "value": null,
          "translatable": true
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the label.",
          "type": "object",
          "value": {}
        },
        "renderer": {
          "description": "A function that returns custom center content. The function takes a dataContext argument, \nprovided by the chart, with the following properties: outerBounds: Object containing (x, y, width, height) of the rectangle circumscribing the center area. The x and y coordinates are relative to the top, left corner of the element. innerBounds: Object containing (x, y, width, height) of the rectangle inscribed in the center area. The x and y coordinates are relative to the top, left corner of the element. label: The pieCenter label. componentElement: The chart element. \n\nThe function should return an Object with the following property: insert: HTMLElement - An HTML element, which will be overlaid on top of the pie chart. This HTML element will block interactivity of the chart by default, but the CSS pointer-events property can be set to 'none' on this element if the chart's interactivity is desired. \n",
          "type": "function",
          "value": null
        },
        "scaling": {
          "description": "The scaling behavior of the label if it is numeric. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "billion",
            "million",
            "none",
            "quadrillion",
            "thousand",
            "trillion"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "billion": {
              "displayName": "Billion"
            },
            "million": {
              "displayName": "Million"
            },
            "none": {
              "displayName": "None"
            },
            "quadrillion": {
              "displayName": "Quadrillion"
            },
            "thousand": {
              "displayName": "Thousand"
            },
            "trillion": {
              "displayName": "Trillion"
            }
          }
        }
      }
    },
    "plotArea": {
      "description": "An object defining the style of the plot area.",
      "type": "object",
      "displayName": "Plot Area",
      "value": {},
      "properties": {
        "backgroundColor": {
          "description": "The color of the plot area background.",
          "type": "string",
          "value": null
        },
        "borderColor": {
          "description": "The border color to be set on the chart's plot area.",
          "type": "string",
          "value": null
        },
        "borderWidth": {
          "description": "The border width to be set on the chart's plot area.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "rendered": {
          "description": "Specifies whether the plot area is rendered.",
          "type": "string",
          "value": "on",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        }
      }
    },
    "polarGridShape": {
      "description": "Defines whether the grid shape of the polar chart is circle or polygon. Only applies to polar line and area charts.",
      "type": "string",
      "displayName": "Polar Grid Shape",
      "value": "circle",
      "enumValues": [
        "circle",
        "polygon"
      ],
      "propertyEditorValues": {
        "circle": {
          "displayName": "Circle"
        },
        "polygon": {
          "displayName": "Polygon"
        }
      }
    },
    "selection": {
      "description": "An array used to define the ids of the initially selected objects.\nWhen the selection is changed, the event.detail of the selectionChanged event will contain the following additional properties: Name Type Description selectionData Object an array containing objects describing the selected data items Properties Name Type Description data object the data of the item, if one was specified groupData Array the group data of the item seriesData object the series data of the item endGroup string the end group of a marquee selection on a chart with categorical axis startGroup string the start group of a marquee selection on a chart with categorical axis xMax number the maximum x value of a marquee selection xMin number the minimum x value of a marquee selection yMax number the maximum y value of a marquee selection yMin number the minimum y value of a marquee selection \n",
      "type": "Array.<string>",
      "displayName": "Selection",
      "value": "[]",
      "writeback": true
    },
    "selectionMode": {
      "description": "The type of selection behavior that is enabled on the chart.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "none",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "displayName": "Multiple"
        },
        "none": {
          "displayName": "None"
        },
        "single": {
          "displayName": "Single"
        }
      }
    },
    "series": {
      "description": "An array of objects with the following properties, used to define series labels and override series styles. Only a single series is supported for stock charts. Also accepts a Promise for deferred data rendering.",
      "type": "Array.<object>|Promise",
      "displayName": "Series",
      "value": null,
      "properties": {
        "areaColor": {
          "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
          "type": "string",
          "value": null
        },
        "areaSvgClassName": {
          "description": "The CSS style class to apply if series type is area or lineWithArea. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute.",
          "type": "string",
          "value": null
        },
        "areaSvgStyle": {
          "description": "The inline style to apply if series type is area or lineWithArea. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute.",
          "type": "object",
          "value": null
        },
        "assignedToY2": {
          "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
          "type": "string",
          "value": "off",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "borderColor": {
          "description": "The border color of the series.",
          "type": "string",
          "value": null
        },
        "borderWidth": {
          "description": "The border width of the series.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "boxPlot": {
          "description": "An object containing the style properties of the box plot series.",
          "type": "object",
          "value": null,
          "properties": {
            "medianSvgClassName": {
              "description": "The CSS style class to apply to the median line.",
              "type": "string",
              "value": null
            },
            "medianSvgStyle": {
              "description": "The CSS inline style to apply to the median line.",
              "type": "object",
              "value": null
            },
            "q2Color": {
              "description": "The color of the Q2 segment of the box.",
              "type": "string",
              "value": null
            },
            "q2SvgClassName": {
              "description": "The CSS style class to apply to the Q2 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q2Color attribute.",
              "type": "string",
              "value": null
            },
            "q2SvgStyle": {
              "description": "The CSS inline style to apply to the Q2 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q2Color attribute.",
              "type": "object",
              "value": null
            },
            "q3Color": {
              "description": "The color of the Q3 segment of the box.",
              "type": "string",
              "value": null
            },
            "q3SvgClassName": {
              "description": "The CSS style class to apply to the Q3 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q3Color attribute.",
              "type": "string",
              "value": null
            },
            "q3SvgStyle": {
              "description": "The CSS inline style to apply to the Q3 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q3Color attribute.",
              "type": "object",
              "value": null
            },
            "whiskerEndLength": {
              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
              "type": "string",
              "value": null
            },
            "whiskerEndSvgClassName": {
              "description": "The CSS style class to apply to the whisker ends.",
              "type": "string",
              "value": null
            },
            "whiskerEndSvgStyle": {
              "description": "The CSS inline style to apply to the whisker ends.",
              "type": "object",
              "value": null
            },
            "whiskerSvgClassName": {
              "description": "The CSS style class to apply to the whisker stems.",
              "type": "string",
              "value": null
            },
            "whiskerSvgStyle": {
              "description": "The CSS inline style to apply to the whisker stems.",
              "type": "object",
              "value": null
            }
          }
        },
        "categories": {
          "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
          "type": "Array.<string>",
          "value": null
        },
        "color": {
          "description": "The color of the series.",
          "type": "string",
          "value": null
        },
        "displayInLegend": {
          "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "drilling": {
          "description": "Whether drilling is enabled on the series item. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click. To enable drilling for all series items at once, use the drilling attribute in the top level.",
          "type": "string",
          "value": "inherit",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "id": {
          "description": "The id of the series. Defaults to the name or the series index if not specified.",
          "type": "string",
          "value": null
        },
        "items": {
          "description": "An array of values or an array of objects with the following properties that defines the data items for the series.",
          "type": "Array.<object>|Array.<number>",
          "value": null,
          "properties": {
            "borderColor": {
              "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
              "type": "string",
              "value": null
            },
            "borderWidth": {
              "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
              "type": "number",
              "value": null,
              "units": "pixels"
            },
            "boxPlot": {
              "description": "An object containing the style properties of the box plot item.",
              "type": "object",
              "value": null,
              "properties": {
                "medianSvgClassName": {
                  "description": "The CSS style class to apply to the median line.",
                  "type": "string",
                  "value": null
                },
                "medianSvgStyle": {
                  "description": "The CSS inline style to apply to the median line.",
                  "type": "object",
                  "value": null
                },
                "q2Color": {
                  "description": "The color of the Q2 segment of the box.",
                  "type": "string",
                  "value": null
                },
                "q2SvgClassName": {
                  "description": "The CSS style class to apply to the Q2 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q2Color attribute.",
                  "type": "string",
                  "value": null
                },
                "q2SvgStyle": {
                  "description": "The CSS inline style to apply to the Q2 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q2Color attribute.",
                  "type": "object",
                  "value": null
                },
                "q3SvgClassName": {
                  "description": "The CSS style class to apply to the Q3 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q3Color attribute.",
                  "type": "string",
                  "value": null
                },
                "q3SvgStyle": {
                  "description": "The CSS inline style to apply to the Q3 segment of the box. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the q3Color attribute.",
                  "type": "object",
                  "value": null
                },
                "whiskerEndLength": {
                  "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%'). The specified length will be rounded down to an odd number of pixels to ensure symmetry.",
                  "type": "string",
                  "value": null
                },
                "whiskerEndSvgClassName": {
                  "description": "The CSS style class to apply to the whisker ends.",
                  "type": "string",
                  "value": null
                },
                "whiskerEndSvgStyle": {
                  "description": "The CSS inline style to apply to the whisker ends.",
                  "type": "object",
                  "value": null
                },
                "whiskerSvgClassName": {
                  "description": "The CSS style class to apply to the whisker stems.",
                  "type": "string",
                  "value": null
                },
                "whiskerSvgStyle": {
                  "description": "The CSS inline style to apply to the whisker stems.",
                  "type": "object",
                  "value": null
                }
              }
            },
            "categories": {
              "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
              "type": "Array.<string>",
              "value": null
            },
            "close": {
              "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
              "type": "number",
              "value": null
            },
            "color": {
              "description": "The color of the data item.",
              "type": "string",
              "value": null
            },
            "drilling": {
              "description": "Whether drilling is enabled for the data item. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all data items at once, use the drilling attribute in the top level.",
              "type": "string",
              "value": "inherit",
              "enumValues": [
                "inherit",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "inherit": {
                  "displayName": "Inherit"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "high": {
              "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
              "type": "number",
              "value": null
            },
            "id": {
              "description": "(Optional) The id of the data item. This id will be provided as part of the context for events on the chart.",
              "type": "string",
              "value": null
            },
            "items": {
              "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
              "type": "Array.<object>|Array.<number>",
              "value": null
            },
            "label": {
              "description": "The label for the data item. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
              "type": "string|Array.<string>",
              "value": null,
              "translatable": true
            },
            "labelPosition": {
              "description": "The position of the data label. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively. The 'outsideSlice' value only applies to pie charts. The 'aboveMarker', 'belowMarker', 'beforeMarker', and 'afterMarker' values only apply to line, area, scatter, and bubble series. The 'insideBarEdge' and 'outsideBarEdge' values only apply to non-polar bar series. Stacked bars do not support 'outsideBarEdge'. The chart does not currently adjust layout to fit labels within the plot area or deal with any overlaps between labels.",
              "type": "string|Array.<string>",
              "value": "auto",
              "enumValues": [
                "aboveMarker",
                "afterMarker",
                "auto",
                "beforeMarker",
                "belowMarker",
                "center",
                "insideBarEdge",
                "none",
                "outsideBarEdge",
                "outsideSlice"
              ],
              "propertyEditorValues": {
                "aboveMarker": {
                  "displayName": "Above Marker"
                },
                "afterMarker": {
                  "displayName": "After Marker"
                },
                "auto": {
                  "displayName": "Auto"
                },
                "beforeMarker": {
                  "displayName": "Before Marker"
                },
                "belowMarker": {
                  "displayName": "Below Marker"
                },
                "center": {
                  "displayName": "Center"
                },
                "insideBarEdge": {
                  "displayName": "Inside Bar Edge"
                },
                "none": {
                  "displayName": "None"
                },
                "outsideBarEdge": {
                  "displayName": "Outside Bar Edge"
                },
                "outsideSlice": {
                  "displayName": "Outside Slice"
                }
              }
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the data label. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively.",
              "type": "object|Array.<object>",
              "value": null
            },
            "low": {
              "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
              "type": "number",
              "value": null
            },
            "markerDisplayed": {
              "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "markerShape": {
              "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. The chart will style the custom shapes the same way as built-in shapes, supporting properties like color and borderColor and applying hover and selection effects. Only 'auto' is supported for range series.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "circle",
                "diamond",
                "human",
                "plus",
                "square",
                "star",
                "triangleDown",
                "triangleUp"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "markerSize": {
              "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
              "type": "number",
              "value": null,
              "units": "pixels"
            },
            "open": {
              "description": "The open value for stock candlestick.",
              "type": "number",
              "value": null
            },
            "pattern": {
              "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "largeChecker",
                "largeCrosshatch",
                "largeDiagonalLeft",
                "largeDiagonalRight",
                "largeDiamond",
                "largeTriangle",
                "smallChecker",
                "smallCrosshatch",
                "smallDiagonalLeft",
                "smallDiagonalRight",
                "smallDiamond",
                "smallTriangle"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "largeChecker": {
                  "displayName": "Large Checker"
                },
                "largeCrosshatch": {
                  "displayName": "Large Crosshatch"
                },
                "largeDiagonalLeft": {
                  "displayName": "Large Diagonal Left"
                },
                "largeDiagonalRight": {
                  "displayName": "Large Diagonal Right"
                },
                "largeDiamond": {
                  "displayName": "Large Diamond"
                },
                "largeTriangle": {
                  "displayName": "Large Triangle"
                },
                "smallChecker": {
                  "displayName": "Small Checker"
                },
                "smallCrosshatch": {
                  "displayName": "Small Crosshatch"
                },
                "smallDiagonalLeft": {
                  "displayName": "Small Diagonal Left"
                },
                "smallDiagonalRight": {
                  "displayName": "Small Diagonal Right"
                },
                "smallDiamond": {
                  "displayName": "Small Diamond"
                },
                "smallTriangle": {
                  "displayName": "Small Triangle"
                }
              }
            },
            "q1": {
              "description": "The first quartile value for box plot.",
              "type": "number",
              "value": null
            },
            "q2": {
              "description": "The second quartile (median) value for box plot.",
              "type": "number",
              "value": null
            },
            "q3": {
              "description": "The third quartile value for box plot.",
              "type": "number",
              "value": null
            },
            "shortDesc": {
              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
              "type": "string",
              "value": null,
              "translatable": true
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape.",
              "type": "string",
              "value": null
            },
            "sourceHover": {
              "description": "The optional URI for the hover state. If not specified, the source image will be used.",
              "type": "string",
              "value": null
            },
            "sourceHoverSelected": {
              "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
              "type": "string",
              "value": null
            },
            "sourceSelected": {
              "description": "The optional URI for the selected state. If not specified, the source image will be used.",
              "type": "string",
              "value": null
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute.",
              "type": "string",
              "value": null
            },
            "svgStyle": {
              "description": "The inline style to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute.",
              "type": "object",
              "value": null
            },
            "targetValue": {
              "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
              "type": "number",
              "value": null
            },
            "value": {
              "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts.",
              "type": "number",
              "value": null
            },
            "volume": {
              "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
              "type": "number",
              "value": null
            },
            "x": {
              "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis.\nFor categorical axis, if the x value is not specified, it will default to the item index.\nFor regular time axis, if the x value is not specified, it will default to the group name of the item.",
              "type": "number|string",
              "value": null
            },
            "y": {
              "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
              "type": "number",
              "value": null
            },
            "z": {
              "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
              "type": "number",
              "value": null
            }
          }
        },
        "lineStyle": {
          "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "string",
          "value": "solid",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "displayName": "Dashed"
            },
            "dotted": {
              "displayName": "Dotted"
            },
            "solid": {
              "displayName": "Solid"
            }
          }
        },
        "lineType": {
          "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. centeredStepped and centeredSegmented are not supported for polar, scatter, and bubble charts.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "centeredSegmented",
            "centeredStepped",
            "curved",
            "none",
            "segmented",
            "stepped",
            "straight"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "centeredSegmented": {
              "displayName": "Centered Segmented"
            },
            "centeredStepped": {
              "displayName": "Centered Stepped"
            },
            "curved": {
              "displayName": "Curved"
            },
            "none": {
              "displayName": "None"
            },
            "segmented": {
              "displayName": "Segmented"
            },
            "stepped": {
              "displayName": "Stepped"
            },
            "straight": {
              "displayName": "Straight"
            }
          }
        },
        "lineWidth": {
          "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "number",
          "value": null,
          "minimum": 0,
          "units": "pixels"
        },
        "markerColor": {
          "description": "The color of the data markers, if different from the series color.",
          "type": "string",
          "value": null
        },
        "markerDisplayed": {
          "description": "Defines whether the data markers should be displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. The chart will style the custom shapes the same way as built-in shapes, supporting properties like color and borderColor and applying hover and selection effects. Only 'auto' is supported for range series.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "circle",
            "diamond",
            "human",
            "plus",
            "square",
            "star",
            "triangleDown",
            "triangleUp"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "markerSvgClassName": {
          "description": "The CSS style class to apply to the data markers.The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the marker color attribute.",
          "type": "string",
          "value": null
        },
        "markerSvgStyle": {
          "description": "The inline style to apply to the data markers. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the marker color attribute.",
          "type": "object",
          "value": null
        },
        "name": {
          "description": "The name of the series, displayed in the legend and tooltips.",
          "type": "string",
          "value": null
        },
        "pattern": {
          "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "pieSliceExplode": {
          "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
          "type": "number",
          "value": 0,
          "maximum": 1,
          "minimum": 0
        },
        "shortDesc": {
          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corressponding legend item for the series.",
          "type": "string",
          "value": null,
          "translatable": true
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
          "type": "string",
          "value": null
        },
        "sourceHover": {
          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
          "type": "string",
          "value": null
        },
        "sourceHoverSelected": {
          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
          "type": "string",
          "value": null
        },
        "sourceSelected": {
          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
          "type": "string",
          "value": null
        },
        "stackCategory": {
          "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
          "type": "string",
          "value": null
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaClassName is also specified. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute.",
          "type": "string",
          "value": null
        },
        "svgStyle": {
          "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaStyle is also specified.The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute.",
          "type": "object",
          "value": null
        },
        "type": {
          "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "area",
            "auto",
            "bar",
            "boxPlot",
            "candlestick",
            "line",
            "lineWithArea"
          ],
          "propertyEditorValues": {
            "area": {
              "displayName": "Area"
            },
            "auto": {
              "displayName": "Auto"
            },
            "bar": {
              "displayName": "Bar"
            },
            "boxPlot": {
              "displayName": "Box Plot"
            },
            "candlestick": {
              "displayName": "Candlestick"
            },
            "line": {
              "displayName": "Line"
            },
            "lineWithArea": {
              "displayName": "Line With Area"
            }
          }
        }
      }
    },
    "sorting": {
      "description": "Specifies the sorting of the data. It should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.",
      "type": "string",
      "displayName": "Sorting",
      "value": "off",
      "enumValues": [
        "ascending",
        "descending",
        "off"
      ],
      "propertyEditorValues": {
        "ascending": {
          "displayName": "Ascending"
        },
        "descending": {
          "displayName": "Descending"
        },
        "off": {
          "displayName": "Off"
        }
      }
    },
    "splitDualY": {
      "description": "Defines whether the plot area is split into two sections, so that sets of data assigned to the different Y-axes appear in different parts of the plot area. Stock charts do not support \"off\".",
      "type": "string",
      "displayName": "Split Dual Y",
      "value": "auto",
      "enumValues": [
        "auto",
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "splitterPosition": {
      "description": "In a split dual-Y chart, specifies the fraction of the space that is given to the Y-axis subchart. Valid values are numbers from 0 to 1.",
      "type": "number",
      "displayName": "Splitter Position",
      "value": 0.5,
      "maximum": 1,
      "minimum": 0
    },
    "stack": {
      "description": "Defines whether the data items are stacked. Only applies to bar, line, area, and combo charts. Does not apply to range series.",
      "type": "string",
      "displayName": "Stack",
      "value": "off",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "stackLabel": {
      "description": "Defines whether or not the total values of stacked data items should be displayed. Only applies to bar charts. It can be formatted by the valueFormat of the type 'label'.",
      "type": "string",
      "displayName": "Stack Label",
      "value": "off",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "styleDefaults": {
      "description": "An object defining the default styles for series colors, marker shapes, and other style attributes. Properties specified on this object may be overridden by specifications on the data object.",
      "type": "object",
      "displayName": "Style Defaults",
      "value": {},
      "properties": {
        "animationDownColor": {
          "description": "The color of the indicator shown for a decreasing data change animation.",
          "type": "string",
          "value": null
        },
        "animationDuration": {
          "description": "The duration of the animations, in milliseconds.",
          "type": "number",
          "value": null,
          "minimum": 0,
          "units": "milliseconds"
        },
        "animationIndicators": {
          "description": "Defines whether data change indicators are displayed during animation.",
          "type": "string",
          "value": "all",
          "enumValues": [
            "all",
            "none"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationUpColor": {
          "description": "The color of the indicator shown for an increasing data change animation.",
          "type": "string",
          "value": null
        },
        "barGapRatio": {
          "description": "Specifies the width of the bar group gap as a ratio of the group width. The valid value is a number from 0 to 1.",
          "type": "number",
          "value": null,
          "maximum": 1,
          "minimum": 0
        },
        "borderColor": {
          "description": "The default border color for the data items. For funnel and pyramid charts, it is used for the slice border.",
          "type": "string",
          "value": null
        },
        "borderWidth": {
          "description": "The default border width for the data items. For funnel and pyramid charts, it is used for the slice border.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "boxPlot": {
          "description": "An object containing the style properties of the box plot items.",
          "type": "object",
          "value": {},
          "properties": {
            "medianSvgClassName": {
              "description": "The CSS style class to apply to the median line.",
              "type": "string"
            },
            "medianSvgStyle": {
              "description": "The CSS inline style to apply to the median line.",
              "type": "object",
              "value": {}
            },
            "whiskerEndLength": {
              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
              "type": "string",
              "value": null
            },
            "whiskerEndSvgClassName": {
              "description": "The CSS style class to apply to the whisker ends.",
              "type": "string"
            },
            "whiskerEndSvgStyle": {
              "description": "The CSS inline style to apply to the whisker ends.",
              "type": "object",
              "value": {}
            },
            "whiskerSvgClassName": {
              "description": "The CSS style class to apply to the whisker stems.",
              "type": "string"
            },
            "whiskerSvgStyle": {
              "description": "The CSS inline style to apply to the whisker stems.",
              "type": "object",
              "value": {}
            }
          }
        },
        "colors": {
          "description": "The array defining the default color ramp for the series.",
          "type": "Array.<string>",
          "value": null
        },
        "dataCursor": {
          "description": "An object defining the data cursor style.",
          "type": "object",
          "value": {},
          "properties": {
            "lineColor": {
              "description": "The color of the data cursor line.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the data cursor line.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the data cursor line in pixels.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "markerColor": {
              "description": "The color of the data cursor marker. Defaults to the data series color.",
              "type": "string",
              "value": null
            },
            "markerDisplayed": {
              "description": "Whether the data cursor marker is displayed. Marker should only be hidden if the data cursor is displaying information for the entire group.",
              "type": "string",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "markerSize": {
              "description": "The size of the data cursor marker in pixels.",
              "type": "number",
              "value": null,
              "units": "pixels"
            }
          }
        },
        "dataItemGaps": {
          "description": "Specifies the presence and size of the gaps between data items, such as bars, markers, and areas. Valid values are a percentage string from 0% to 100%, where 100% produces the maximum supported gaps.",
          "type": "string",
          "value": null
        },
        "dataLabelPosition": {
          "description": "The position of the data label. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively. The 'outsideSlice' value only applies to pie charts. The 'aboveMarker', 'belowMarker', 'beforeMarker', and 'afterMarker' values only apply to line, area, scatter, and bubble series. The 'insideBarEdge' and 'outsideBarEdge' values only apply to non-polar bar series. Stacked bars do not support 'outsideBarEdge'. The chart does not currently adjust layout to fit labels within the plot area or deal with any overlaps between labels.",
          "type": "string|Array.<string>",
          "value": "auto",
          "enumValues": [
            "aboveMarker",
            "afterMarker",
            "auto",
            "beforeMarker",
            "belowMarker",
            "center",
            "insideBarEdge",
            "none",
            "outsideBarEdge",
            "outsideSlice"
          ],
          "propertyEditorValues": {
            "aboveMarker": {
              "displayName": "Above Marker"
            },
            "afterMarker": {
              "displayName": "After Marker"
            },
            "auto": {
              "displayName": "Auto"
            },
            "beforeMarker": {
              "displayName": "Before Marker"
            },
            "belowMarker": {
              "displayName": "Below Marker"
            },
            "center": {
              "displayName": "Center"
            },
            "insideBarEdge": {
              "displayName": "Inside Bar Edge"
            },
            "none": {
              "displayName": "None"
            },
            "outsideBarEdge": {
              "displayName": "Outside Bar Edge"
            },
            "outsideSlice": {
              "displayName": "Outside Slice"
            }
          }
        },
        "dataLabelStyle": {
          "description": "The CSS style object defining the style of the data label text. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively.",
          "type": "object|Array.<object>",
          "value": null
        },
        "funnelBackgroundColor": {
          "description": "The default background color of funnel slices that show actual/target values.",
          "type": "string",
          "value": null
        },
        "groupSeparators": {
          "description": "An object defining the style for hierarchical label separators.",
          "type": "object",
          "value": {},
          "properties": {
            "color": {
              "description": "The color of the separators lines.",
              "type": "string",
              "value": null
            },
            "rendered": {
              "description": "Defines whether the group separators are displayed.",
              "type": "string",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in ms for highlighting items in chart.",
          "type": "number",
          "value": null,
          "minimum": 0,
          "units": "milliseconds"
        },
        "lineStyle": {
          "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "string",
          "value": "solid",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "displayName": "Dashed"
            },
            "dotted": {
              "displayName": "Dotted"
            },
            "solid": {
              "displayName": "Solid"
            }
          }
        },
        "lineType": {
          "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. centeredStepped and centeredSegmented are not supported for polar, scatter, and bubble charts.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "centeredSegmented",
            "centeredStepped",
            "curved",
            "none",
            "segmented",
            "stepped",
            "straight"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "centeredSegmented": {
              "displayName": "Centered Segmented"
            },
            "centeredStepped": {
              "displayName": "Centered Stepped"
            },
            "curved": {
              "displayName": "Curved"
            },
            "none": {
              "displayName": "None"
            },
            "segmented": {
              "displayName": "Segmented"
            },
            "stepped": {
              "displayName": "Stepped"
            },
            "straight": {
              "displayName": "Straight"
            }
          }
        },
        "lineWidth": {
          "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "number",
          "value": null,
          "minimum": 0,
          "units": "pixels"
        },
        "markerColor": {
          "description": "The color of the data markers, if different from the series color.",
          "type": "string",
          "value": null
        },
        "markerDisplayed": {
          "description": "Defines whether the data markers should be displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. The chart will style the custom shapes the same way as built-in shapes, supporting properties like color and borderColor and applying hover and selection effects. Only 'auto' is supported for range series.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "circle",
            "diamond",
            "human",
            "plus",
            "square",
            "star",
            "triangleDown",
            "triangleUp"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers in pixels.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "marqueeBorderColor": {
          "description": "The border color of the marquee. Applies to marquee selection and marquee zoom.",
          "type": "string",
          "value": null
        },
        "marqueeColor": {
          "description": "The fill color of the marquee. Applies to marquee selection and marquee zoom.",
          "type": "string",
          "value": null
        },
        "maxBarWidth": {
          "description": "Specifies the maximum width of each bar in pixels.",
          "type": "number",
          "value": null,
          "units": "pixels"
        },
        "otherColor": {
          "description": "Specifies the color of the \"Other\" slice. Only applies to pie chart.",
          "type": "string",
          "value": null
        },
        "patterns": {
          "description": "The array defining the default pattern ramp for the series. This is used only when seriesEffect is 'pattern'.",
          "type": "Array.<string>",
          "value": null
        },
        "pieFeelerColor": {
          "description": "The color of the line extending from the pie slice to the slice label.",
          "type": "string",
          "value": null
        },
        "pieInnerRadius": {
          "description": "Specifies the radius of the inner circle that can be used to create a donut chart. Valid values range from 0 (default) to 1. Not supported if 3D effect is on.",
          "type": "number",
          "value": 0,
          "maximum": 1,
          "minimum": 0
        },
        "selectionEffect": {
          "description": "The selection effect that is applied to selected items. The values explode and highlightAndExplode only apply to pie charts.",
          "type": "string",
          "value": "highlight",
          "enumValues": [
            "explode",
            "highlight",
            "highlightAndExplode"
          ],
          "propertyEditorValues": {
            "explode": {
              "displayName": "Explode"
            },
            "highlight": {
              "displayName": "Highlight"
            },
            "highlightAndExplode": {
              "displayName": "Highlight And Explode"
            }
          }
        },
        "seriesEffect": {
          "description": "Defines the fill effect for the data items.",
          "type": "string",
          "value": "gradient",
          "enumValues": [
            "color",
            "gradient",
            "pattern"
          ],
          "propertyEditorValues": {
            "color": {
              "displayName": "Color"
            },
            "gradient": {
              "displayName": "Gradient"
            },
            "pattern": {
              "displayName": "Pattern"
            }
          }
        },
        "shapes": {
          "description": "The array defining the default shape ramp for the series. Valid values are defined in the markerShape attribute.",
          "type": "Array.<string>",
          "value": null
        },
        "stackLabelStyle": {
          "description": "The CSS style object defining the style of the stack label. Only applies to stacked bar charts.",
          "type": "object",
          "value": {}
        },
        "stockFallingColor": {
          "description": "In stock charts, the color of the candlestick when the 'open' value is greater than the 'close' value.",
          "type": "string",
          "value": null
        },
        "stockRangeColor": {
          "description": "In stock charts, the color of the range bars for candlestick.",
          "type": "string",
          "value": null
        },
        "stockRisingColor": {
          "description": "In stock charts, the color of the candlestick when the 'close' value is greater than the 'open' value.",
          "type": "string",
          "value": null
        },
        "stockVolumeColor": {
          "description": "In stock charts, the color of the volume bars. If specified, overrides the default rising and falling colors used by the volume bars.",
          "type": "string",
          "value": null
        },
        "threeDEffect": {
          "description": "Defines whether the chart is displayed with a 3D effect. Only applies to pie, funnel and pyramid charts.",
          "type": "string",
          "value": "off",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "tooltipLabelStyle": {
          "description": "The CSS style object defining the style of the labels in the tooltip.",
          "type": "object",
          "value": {}
        },
        "tooltipValueStyle": {
          "description": "The CSS style object defining the style of the values in the tooltip.",
          "type": "object",
          "value": {}
        }
      }
    },
    "timeAxisType": {
      "description": "The type of time axis to display in the chart. Time axis is only supported for Cartesian bar, line, area, stock, box plot, and combo charts. If the type is \"enabled\" or \"skipGaps\", the time values must be provided through the \"groups\" attribute and stacking is supported. If the type is \"skipGaps\", the groups will be rendered at a regular interval regardless of any time gaps that may exist in the data. If the type is \"mixedFrequency\", the time values must be provided through the \"x\" attribute of the the data items and stacking is not supported.",
      "type": "string",
      "displayName": "Time Axis Type",
      "value": "auto",
      "enumValues": [
        "auto",
        "disabled",
        "enabled",
        "mixedFrequency",
        "skipGaps"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "disabled": {
          "displayName": "Disabled"
        },
        "enabled": {
          "displayName": "Enabled"
        },
        "mixedFrequency": {
          "displayName": "Mixed Frequency"
        },
        "skipGaps": {
          "displayName": "Skip Gaps"
        }
      }
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "object",
      "displayName": "Tooltip",
      "value": {},
      "properties": {
        "renderer": {
          "description": "A function that returns a custom tooltip. The function takes a dataContext argument, provided by the chart, with the following properties: parentElement: The tooltip element. This can be used to change the tooltip border or background color. id: The id of the hovered item. series: The id of the series the hovered item belongs to. group: The ids or an array of ids of the group(s) the hovered item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids. value, targetValue, x, y, z, low, high, open, close, volume: The values of the hovered item. label: The data label of the hovered item. data: The data object of the hovered item. For nested items, it will be an array containing the parent item data and nested item data. seriesData: The data for the series the hovered item belongs to. groupData: An array of data for the group the hovered item belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the hovered item. componentElement: The chart element. color: The color of the hovered item. For reference objects, this tooltip function is only called if the reference object has an id. Note: In future releases, tooltips may be fired for objects other than data items and reference objects. To know whether a hovered object is a data item, please check that the \"series\" and \"group\" properties are not null. The function should return an Object that contains only one of the two properties: insert: HTMLElement | string - An HTML element, which will be appended to the tooltip, or a tooltip string. preventDefault: true - Indicates that the tooltip should not be displayed. It is not necessary to return {preventDefault:false} to display tooltip, since this is a default behavior. ",
          "type": "function",
          "value": null
        }
      }
    },
    "touchResponse": {
      "description": "Data visualizations require a press and hold delay before triggering tooltips, marquee selection, and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events if the element does not require an internal feature that requires a touch start gesture like panning, zooming, or when marquee selection is initiated. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if panning is not available for those elements that support the feature.",
      "type": "string",
      "displayName": "Touch Response",
      "value": "auto",
      "enumValues": [
        "auto",
        "touchStart"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "touchStart": {
          "displayName": "Touch Start"
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to\nchanges in size. If set to off, then the\napplication is responsible for calling refresh\nto render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object",
      "displayName": "Translations",
      "value": null,
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Chart"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "{0}: {1}"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Clear Selection"
        },
        "labelClose": {
          "description": "Used for the close value in the tooltip for stock data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Close"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "{0} of {1}"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Data Visualization"
        },
        "labelDate": {
          "description": "Used for the date value in the tooltip, if a time axis is being used.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Value"
        },
        "labelDefaultGroupName": {
          "description": "Used when the group names are not specified.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Group {0}"
        },
        "labelGroup": {
          "description": "Used for the default tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Group"
        },
        "labelHigh": {
          "description": ">Used for the high value in the tooltip for stock and range data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "High"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Invalid data"
        },
        "labelLow": {
          "description": "Used for the low value in the tooltip for stock and range data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Low"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "No data to display"
        },
        "labelOpen": {
          "description": "Used for the open value in the tooltip for stock data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Open"
        },
        "labelOther": {
          "description": "Used for the other series label which aggregates small data values.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Other"
        },
        "labelPercentage": {
          "description": "Used for displaying the percentage in the tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Percentage"
        },
        "labelQ1": {
          "description": "Used for displaying the first quartile for box plots.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Q1"
        },
        "labelQ2": {
          "description": "Used for displaying the second quartile (i.e. median) for box plots.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Q2"
        },
        "labelQ3": {
          "description": "Used for displaying the third quartile for box plots.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Q3"
        },
        "labelSeries": {
          "description": "Used for the default tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Series"
        },
        "labelTargetValue": {
          "description": "Used for the funnel chart target value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Target"
        },
        "labelValue": {
          "description": "Used for the data item value in the tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Value"
        },
        "labelVolume": {
          "description": "Used for the volume value in the tooltip for stock data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Volume"
        },
        "labelX": {
          "description": "Used for the x value in the tooltip\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "X"
        },
        "labelY": {
          "description": "Used for the y value in the tooltip\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Y"
        },
        "labelZ": {
          "description": "Used for the z value in the tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Z"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Collapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Drillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Expanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Hidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Isolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Maximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Minimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Selected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Unselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Visible"
        },
        "tooltipPan": {
          "description": "Used for the pan tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Pan"
        },
        "tooltipSelect": {
          "description": "Used for the marquee select tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Marquee select"
        },
        "tooltipZoom": {
          "description": "Used for the marquee zoom tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Marquee zoom"
        }
      }
    },
    "type": {
      "description": "The chart type.",
      "type": "string",
      "displayName": "Type",
      "value": "bar",
      "enumValues": [
        "area",
        "bar",
        "boxPlot",
        "bubble",
        "combo",
        "funnel",
        "line",
        "lineWithArea",
        "pie",
        "pyramid",
        "scatter",
        "stock"
      ],
      "propertyEditorValues": {
        "area": {
          "displayName": "Area"
        },
        "bar": {
          "displayName": "Bar"
        },
        "boxPlot": {
          "displayName": "Box Plot"
        },
        "bubble": {
          "displayName": "Bubble"
        },
        "combo": {
          "displayName": "Combo"
        },
        "funnel": {
          "displayName": "Funnel"
        },
        "line": {
          "displayName": "Line"
        },
        "lineWithArea": {
          "displayName": "Line With Area"
        },
        "pie": {
          "displayName": "Pie"
        },
        "pyramid": {
          "displayName": "Pyramid"
        },
        "scatter": {
          "displayName": "Scatter"
        },
        "stock": {
          "displayName": "Stock"
        }
      }
    },
    "valueFormats": {
      "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.",
      "type": "object",
      "displayName": "Value Formats",
      "value": {},
      "properties": {
        "close": {
          "description": "Specifies the value formatting and tooltip behavior for the close values of a stock chart.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "group": {
          "description": "Specifies tooltip behavior for the groups.",
          "type": "object",
          "value": {},
          "properties": {
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. This value can also take an array of strings to be applied to hierarchical group names, from outermost to innermost.",
              "type": "string|Array.<string>",
              "value": null,
              "translatable": true
            }
          }
        },
        "high": {
          "description": "Specifies the value formatting and tooltip behavior for the high values.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "label": {
          "description": "Specifies the value formatting for the data item labels.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            }
          }
        },
        "low": {
          "description": "Specifies the value formatting and tooltip behavior for the low values.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "open": {
          "description": "Specifies the value formatting and tooltip behavior for the open values of a stock chart.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "q1": {
          "description": "Specifies the value formatting and tooltip behavior for the q1 values of a box plot.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "q2": {
          "description": "Specifies the value formatting and tooltip behavior for the q2 values of a box plot.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "q3": {
          "description": "Specifies the value formatting and tooltip behavior for the q3 values of a box plot.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "series": {
          "description": "Specifies tooltip behavior for the series.",
          "type": "object",
          "value": {},
          "properties": {
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "targetValue": {
          "description": "Specifies the value formatting and tooltip behavior for the target values of a funnel chart.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "value": {
          "description": "Specifies the value formatting and tooltip behavior for the values.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "volume": {
          "description": "Specifies the value formatting and tooltip behavior for the volume values of a stock chart.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "x": {
          "description": "Specifies the value formatting and tooltip behavior for the x values.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "y": {
          "description": "Specifies the value formatting and tooltip behavior for the y values.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "y2": {
          "description": "Specifies the value formatting and tooltip behavior for the y2 values.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        },
        "z": {
          "description": "Specifies the value formatting and tooltip behavior for the z values.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) used to format the label. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip.",
              "type": "string",
              "value": null,
              "translatable": true
            }
          }
        }
      }
    },
    "xAxis": {
      "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles.",
      "type": "object",
      "displayName": "X Axis",
      "value": {},
      "properties": {
        "axisLine": {
          "description": "An object defining properties for the axis line.",
          "type": "object",
          "value": {},
          "properties": {
            "lineColor": {
              "description": "The color of the axis line.",
              "type": "string",
              "value": null
            },
            "lineWidth": {
              "description": "The width of the axis line.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the axis line is rendered.",
              "type": "string",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "baselineScaling": {
          "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
          "type": "string",
          "value": "zero",
          "enumValues": [
            "min",
            "zero"
          ],
          "propertyEditorValues": {
            "min": {
              "displayName": "Min"
            },
            "zero": {
              "displayName": "Zero"
            }
          }
        },
        "dataMax": {
          "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
          "type": "number",
          "value": null
        },
        "dataMin": {
          "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
          "type": "number",
          "value": null
        },
        "majorTick": {
          "description": "An object defining properties for the major tick marks.",
          "type": "object",
          "value": {},
          "properties": {
            "baselineColor": {
              "description": "The color of the major tick mark at the baseline (x = 0). Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "inherit"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "inherit": {
                  "displayName": "Inherit"
                }
              }
            },
            "baselineStyle": {
              "description": "The line style of the major tick mark at the baseline (x = 0). If not specified, it will follow the lineStyle attribute.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "baselineWidth": {
              "description": "The width of the major tick mark at the baseline (x = 0) If not specified, it will follow the lineWidth attribute.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "lineColor": {
              "description": "The color of the major tick marks.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the major tick marks.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the major tick marks.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the major tick marks are rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "max": {
          "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
          "type": "number|string",
          "value": null
        },
        "maxSize": {
          "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "min": {
          "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
          "type": "number|string",
          "value": null
        },
        "minStep": {
          "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures. Only applies to numerical axes.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "minorStep": {
          "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. Only applies to numerical axes. For log axis, the step is a multiplier, so for example, if the minorStep is 2, the minor tick marks will be rendered at 1, 2, 4, 8, and so on.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "minorTick": {
          "description": "An object defining properties for the minor tick marks.",
          "type": "object",
          "value": {},
          "properties": {
            "lineColor": {
              "description": "The color of the minor tick marks.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the minor tick marks.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the minor tick marks.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the minor tick marks are rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "referenceObjects": {
          "description": "The array of reference objects associated with the axis.",
          "type": "Array.<object>",
          "value": "[]",
          "properties": {
            "categories": {
              "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
              "type": "Array.<string>",
              "value": null
            },
            "color": {
              "description": "The color of the reference object.",
              "type": "string",
              "value": null
            },
            "displayInLegend": {
              "description": "Defines whether the reference object should be shown in the legend.",
              "type": "string",
              "value": "off",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "high": {
              "description": "The high value of a reference area. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
              "type": "number",
              "value": null
            },
            "id": {
              "description": "The id of the reference object.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the reference line.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineType": {
              "description": "The line type of the reference line. Only applies if the line value is not constant. centeredStepped and centeredSegmented are not supported for polar, scatter, and bubble charts.",
              "type": "string",
              "value": "straight",
              "enumValues": [
                "centeredSegmented",
                "centeredStepped",
                "curved",
                "segmented",
                "stepped",
                "straight"
              ],
              "propertyEditorValues": {
                "centeredSegmented": {
                  "displayName": "Centered Segmented"
                },
                "centeredStepped": {
                  "displayName": "Centered Stepped"
                },
                "curved": {
                  "displayName": "Curved"
                },
                "segmented": {
                  "displayName": "Segmented"
                },
                "stepped": {
                  "displayName": "Stepped"
                },
                "straight": {
                  "displayName": "Straight"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the reference line.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "location": {
              "description": "The location of the reference object relative to the data items.",
              "type": "string",
              "value": "back",
              "enumValues": [
                "back",
                "front"
              ],
              "propertyEditorValues": {
                "back": {
                  "displayName": "Back"
                },
                "front": {
                  "displayName": "Front"
                }
              }
            },
            "low": {
              "description": "The low value of a reference area. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
              "type": "number",
              "value": null
            },
            "shortDesc": {
              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
              "type": "string",
              "value": null
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the reference object. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the reference object color attribute.",
              "type": "string",
              "value": null
            },
            "svgStyle": {
              "description": "The inline style to apply to the reference object. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the reference object color attribute.",
              "type": "object",
              "value": null
            },
            "text": {
              "description": "The text displayed in the legend for the reference object.",
              "type": "string",
              "value": null,
              "translatable": true
            },
            "type": {
              "description": "The type of reference object being shown.",
              "type": "string",
              "value": "line",
              "enumValues": [
                "area",
                "line"
              ],
              "propertyEditorValues": {
                "area": {
                  "displayName": "Area"
                },
                "line": {
                  "displayName": "Line"
                }
              }
            },
            "value": {
              "description": "The value of a reference line. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
              "type": "number",
              "value": null
            }
          }
        },
        "rendered": {
          "description": "Defines whether the axis is rendered.",
          "type": "string",
          "value": "on",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "scale": {
          "description": "Defines the axis scale. Only applies to numerical axes.",
          "type": "string",
          "value": "linear",
          "enumValues": [
            "linear",
            "log"
          ],
          "propertyEditorValues": {
            "linear": {
              "displayName": "Linear"
            },
            "log": {
              "displayName": "Log"
            }
          }
        },
        "size": {
          "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "step": {
          "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. Only applies to time and numerical axes. For log axis, the step is a multiplier, so for example, if the step is 2, the major tick marks will be rendered at 1, 2, 4, 8, and so on.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "tickLabel": {
          "description": "An object defining the properties of the tick labels.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) to format the labels. When using a time axis, this attribute also takes an array of two converters, which apply respectively to the first and second label levels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "rendered": {
              "description": "Defines whether the tick labels are rendered.",
              "type": "string",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "rotation": {
              "description": "Defines whether the chart will automatically rotate the labels by 90 degrees in order to fit more labels on the axis. The rotation will only be applied to categorical labels for a horizontal axis.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "none"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "none": {
                  "displayName": "None"
                }
              }
            },
            "scaling": {
              "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "style": {
              "description": "The CSS style object defining the style of the labels. The CSS white-space property can be defined with value \"nowrap\" to disable default text wrapping of categorical labels.",
              "type": "object",
              "value": {}
            }
          }
        },
        "title": {
          "description": "The axis title. Does not apply to polar charts.",
          "type": "string",
          "value": null,
          "translatable": true
        },
        "titleStyle": {
          "description": "The CSS style object defining the style of the axis title. The CSS white-space property can be defined with value \"nowrap\" to disable default text wrapping of the title.",
          "type": "object",
          "value": {}
        },
        "viewportEndGroup": {
          "description": "Specifies the end group of the current viewport. Only applies to charts with group or time axis. If not specified, the default end group is the last group in the data set.",
          "type": "number|string",
          "value": null
        },
        "viewportMax": {
          "description": "Specifies the maximum x coordinate of the current viewport for zoom and scroll. For group axis, the group index will be treated as the axis coordinate. If both viewportEndGroup and viewportMax are specified, then viewportMax takes precedence. If not specified, this value will be the axis max.",
          "type": "number|string",
          "value": null
        },
        "viewportMin": {
          "description": "Specifies the minimum x coordinate of the current viewport for zoom and scroll. For group axis, the group index will be treated as the axis coordinate. If both viewportStartGroup and viewportMin are specified, then viewportMin takes precedence. If not specified, this value will be the axis min.",
          "type": "number|string",
          "value": null
        },
        "viewportStartGroup": {
          "description": "Specifies the start group of the current viewport. Only applies to charts with group or time axis. If not specified, the default start group is the first group in the data set.",
          "type": "number|string",
          "value": null
        }
      }
    },
    "y2Axis": {
      "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles. Y2 axis is only supported for Cartesian bar, line, area, and combo charts.",
      "type": "object",
      "displayName": "Y2 Axis",
      "value": {},
      "properties": {
        "alignTickMarks": {
          "description": "Defines whether the tick marks of the y1 and y2 axes are aligned. Not supported for logarithmic axes.",
          "type": "string",
          "value": "on",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "axisLine": {
          "description": "An object defining properties for the axis line.",
          "type": "object",
          "value": {},
          "properties": {
            "lineColor": {
              "description": "The color of the axis line.",
              "type": "string",
              "value": null
            },
            "lineWidth": {
              "description": "The width of the axis line.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the axis line is rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "baselineScaling": {
          "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
          "type": "string",
          "value": "zero",
          "enumValues": [
            "min",
            "zero"
          ],
          "propertyEditorValues": {
            "min": {
              "displayName": "Min"
            },
            "zero": {
              "displayName": "Zero"
            }
          }
        },
        "dataMax": {
          "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
          "type": "number",
          "value": null
        },
        "dataMin": {
          "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
          "type": "number",
          "value": null
        },
        "majorTick": {
          "description": "An object defining properties for the major tick marks.",
          "type": "object",
          "value": {},
          "properties": {
            "baselineColor": {
              "description": "The color of the major tick mark at the baseline (y = 0). Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "inherit"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "inherit": {
                  "displayName": "Inherit"
                }
              }
            },
            "baselineStyle": {
              "description": "The line style of the major tick mark at the baseline (y = 0). If not specified, it will follow the lineStyle attribute.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "baselineWidth": {
              "description": "The width of the major tick mark at the baseline (y = 0) If not specified, it will follow the lineWidth attribute.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "lineColor": {
              "description": "The color of the major tick marks.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the major tick marks.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the major tick marks.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the major tick marks are rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "max": {
          "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data.",
          "type": "number",
          "value": null
        },
        "maxSize": {
          "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "min": {
          "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data.",
          "type": "number",
          "value": null
        },
        "minStep": {
          "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "minorStep": {
          "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. For log axis, the step is a multiplier, so for example, if the minorStep is 2, the minor tick marks will be rendered at 1, 2, 4, 8, and so on.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "minorTick": {
          "description": "An object defining properties for the minor tick marks.",
          "type": "object",
          "value": {},
          "properties": {
            "lineColor": {
              "description": "The color of the minor tick marks.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the minor tick marks.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the minor tick marks.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the minor tick marks are rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "position": {
          "description": "The position of the axis relative to its content. For vertical charts, only start and end apply. For horizontal charts, only top and bottom apply.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "bottom",
            "end",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "bottom": {
              "displayName": "Bottom"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "referenceObjects": {
          "description": "The array of reference objects associated with the axis.",
          "type": "Array.<object>",
          "value": "[]",
          "properties": {
            "categories": {
              "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
              "type": "Array.<string>",
              "value": null
            },
            "color": {
              "description": "The color of the reference object.",
              "type": "string",
              "value": null
            },
            "displayInLegend": {
              "description": "Defines whether the reference object should be shown in the legend.",
              "type": "string",
              "value": "off",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "high": {
              "description": "The high value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
              "type": "number",
              "value": null
            },
            "id": {
              "description": "The id of the reference object.",
              "type": "string",
              "value": null
            },
            "items": {
              "description": "An array of values or an array of objects with the following properties that defines the data for a varying reference object. Only supported for y1 and y2 axes for all chart types.",
              "type": "Array.<object>|Array.<number>",
              "value": null,
              "properties": {
                "high": {
                  "description": "The high value of this point of a reference area.",
                  "type": "number",
                  "value": null
                },
                "low": {
                  "description": "The low value of this point of a reference area.",
                  "type": "number",
                  "value": null
                },
                "value": {
                  "description": "The value of this point of a line object.",
                  "type": "number",
                  "value": null
                },
                "x": {
                  "description": "The x value of this point. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis.\nFor categorical axis, if the x value is not specified, it will default to the item index.\nFor regular time axis, if the x value is not specified, it will default to the group name of the item.",
                  "type": "number|string",
                  "value": null
                }
              }
            },
            "lineStyle": {
              "description": "The line style of the reference line.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineType": {
              "description": "The line type of the reference line. Only applies if the line value is not constant. centeredStepped and centeredSegmented are not supported for polar, scatter, and bubble charts.",
              "type": "string",
              "value": "straight",
              "enumValues": [
                "centeredSegmented",
                "centeredStepped",
                "curved",
                "segmented",
                "stepped",
                "straight"
              ],
              "propertyEditorValues": {
                "centeredSegmented": {
                  "displayName": "Centered Segmented"
                },
                "centeredStepped": {
                  "displayName": "Centered Stepped"
                },
                "curved": {
                  "displayName": "Curved"
                },
                "segmented": {
                  "displayName": "Segmented"
                },
                "stepped": {
                  "displayName": "Stepped"
                },
                "straight": {
                  "displayName": "Straight"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the reference line.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "location": {
              "description": "The location of the reference object relative to the data items.",
              "type": "string",
              "value": "back",
              "enumValues": [
                "back",
                "front"
              ],
              "propertyEditorValues": {
                "back": {
                  "displayName": "Back"
                },
                "front": {
                  "displayName": "Front"
                }
              }
            },
            "low": {
              "description": "The low value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
              "type": "number",
              "value": null
            },
            "shortDesc": {
              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
              "type": "string",
              "value": null
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the reference object. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the reference object color attribute.",
              "type": "string",
              "value": null
            },
            "svgStyle": {
              "description": "The inline style to apply to the reference object. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the reference object color attribute.",
              "type": "object",
              "value": null
            },
            "text": {
              "description": "The text displayed in the legend for the reference object.",
              "type": "string",
              "value": null,
              "translatable": true
            },
            "type": {
              "description": "The type of reference object being shown.",
              "type": "string",
              "value": "line",
              "enumValues": [
                "area",
                "line"
              ],
              "propertyEditorValues": {
                "area": {
                  "displayName": "Area"
                },
                "line": {
                  "displayName": "Line"
                }
              }
            },
            "value": {
              "description": "The value of a reference line. This property defines a constant value across the entire reference line and is ignored if the items array is specified.",
              "type": "number",
              "value": null
            }
          }
        },
        "rendered": {
          "description": "Defines whether the axis is rendered.",
          "type": "string",
          "value": "on",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "scale": {
          "description": "Defines the axis scale. Only applies to numerical axes.",
          "type": "string",
          "value": "linear",
          "enumValues": [
            "linear",
            "log"
          ],
          "propertyEditorValues": {
            "linear": {
              "displayName": "Linear"
            },
            "log": {
              "displayName": "Log"
            }
          }
        },
        "size": {
          "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "step": {
          "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. For log axis, the step is a multiplier, so for example, if the step is 2, the major tick marks will be rendered at 1, 2, 4, 8, and so on.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "tickLabel": {
          "description": "An object defining the properties of the tick labels.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) to format the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "position": {
              "description": "Defines the position of the tick labels relative to the plot area.",
              "type": "string",
              "value": "outside",
              "enumValues": [
                "inside",
                "outside"
              ],
              "propertyEditorValues": {
                "inside": {
                  "displayName": "Inside"
                },
                "outside": {
                  "displayName": "Outside"
                }
              }
            },
            "rendered": {
              "description": "Defines whether the tick labels are rendered.",
              "type": "string",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scaling": {
              "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "style": {
              "description": "The CSS style object defining the style of the labels.",
              "type": "object",
              "value": {}
            }
          }
        },
        "title": {
          "description": "The axis title.",
          "type": "string",
          "value": null,
          "translatable": true
        },
        "titleStyle": {
          "description": "The CSS style object defining the style of the axis title.",
          "type": "object",
          "value": {}
        }
      }
    },
    "yAxis": {
      "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles.",
      "type": "object",
      "displayName": "Y Axis",
      "value": {},
      "properties": {
        "axisLine": {
          "description": "An object defining properties for the axis line.",
          "type": "object",
          "value": {},
          "properties": {
            "lineColor": {
              "description": "The color of the axis line.",
              "type": "string",
              "value": null
            },
            "lineWidth": {
              "description": "The width of the axis line.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the axis line is rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "baselineScaling": {
          "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
          "type": "string",
          "value": "zero",
          "enumValues": [
            "min",
            "zero"
          ],
          "propertyEditorValues": {
            "min": {
              "displayName": "Min"
            },
            "zero": {
              "displayName": "Zero"
            }
          }
        },
        "dataMax": {
          "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
          "type": "number",
          "value": null
        },
        "dataMin": {
          "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
          "type": "number",
          "value": null
        },
        "majorTick": {
          "description": "An object defining properties for the major tick marks.",
          "type": "object",
          "value": {},
          "properties": {
            "baselineColor": {
              "description": "The color of the major tick mark at the baseline (y = 0). Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "inherit"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "inherit": {
                  "displayName": "Inherit"
                }
              }
            },
            "baselineStyle": {
              "description": "The line style of the major tick mark at the baseline (y = 0). If not specified, it will follow the lineStyle attribute.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "baselineWidth": {
              "description": "The width of the major tick mark at the baseline (y = 0) If not specified, it will follow the lineWidth attribute.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "lineColor": {
              "description": "The color of the major tick marks.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the major tick marks.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the major tick marks.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the major tick marks are rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "max": {
          "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data.",
          "type": "number",
          "value": null
        },
        "maxSize": {
          "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "min": {
          "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data.",
          "type": "number",
          "value": null
        },
        "minStep": {
          "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "minorStep": {
          "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. For log axis, the step is a multiplier, so for example, if the minorStep is 2, the minor tick marks will be rendered at 1, 2, 4, 8, and so on.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "minorTick": {
          "description": "An object defining properties for the minor tick marks.",
          "type": "object",
          "value": {},
          "properties": {
            "lineColor": {
              "description": "The color of the minor tick marks.",
              "type": "string",
              "value": null
            },
            "lineStyle": {
              "description": "The line style of the minor tick marks.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the minor tick marks.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "rendered": {
              "description": "Defines whether the minor tick marks are rendered.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "position": {
          "description": "The position of the axis relative to its content. For vertical charts, only start and end apply. For horizontal charts, only top and bottom apply.",
          "type": "string",
          "value": "auto",
          "enumValues": [
            "auto",
            "bottom",
            "end",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "bottom": {
              "displayName": "Bottom"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "referenceObjects": {
          "description": "The array of reference objects associated with the axis.",
          "type": "Array.<object>",
          "value": "[]",
          "properties": {
            "categories": {
              "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
              "type": "Array.<string>",
              "value": null
            },
            "color": {
              "description": "The color of the reference object.",
              "type": "string",
              "value": null
            },
            "displayInLegend": {
              "description": "Defines whether the reference object should be shown in the legend.",
              "type": "string",
              "value": "off",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "high": {
              "description": "The high value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
              "type": "number",
              "value": null
            },
            "id": {
              "description": "The id of the reference object.",
              "type": "string",
              "value": null
            },
            "items": {
              "description": "An array of values or an array of objects with the following properties that defines the data for a varying reference object. Only supported for y1 and y2 axes for all chart types.",
              "type": "Array.<object>|Array.<number>",
              "value": null,
              "properties": {
                "high": {
                  "description": "The high value of this point of a reference area.",
                  "type": "number",
                  "value": null
                },
                "low": {
                  "description": "The low value of this point of a reference area.",
                  "type": "number",
                  "value": null
                },
                "value": {
                  "description": "The value of this point of a line object.",
                  "type": "number",
                  "value": null
                },
                "x": {
                  "description": "The x value of this point. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis.\nFor categorical axis, if the x value is not specified, it will default to the item index.\nFor regular time axis, if the x value is not specified, it will default to the group name of the item.",
                  "type": "number|string",
                  "value": null
                }
              }
            },
            "lineStyle": {
              "description": "The line style of the reference line.",
              "type": "string",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineType": {
              "description": "The line type of the reference line. Only applies if the line value is not constant. centeredStepped and centeredSegmented are not supported for polar, scatter, and bubble charts.",
              "type": "string",
              "value": "straight",
              "enumValues": [
                "centeredSegmented",
                "centeredStepped",
                "curved",
                "segmented",
                "stepped",
                "straight"
              ],
              "propertyEditorValues": {
                "centeredSegmented": {
                  "displayName": "Centered Segmented"
                },
                "centeredStepped": {
                  "displayName": "Centered Stepped"
                },
                "curved": {
                  "displayName": "Curved"
                },
                "segmented": {
                  "displayName": "Segmented"
                },
                "stepped": {
                  "displayName": "Stepped"
                },
                "straight": {
                  "displayName": "Straight"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the reference line.",
              "type": "number",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "location": {
              "description": "The location of the reference object relative to the data items.",
              "type": "string",
              "value": "back",
              "enumValues": [
                "back",
                "front"
              ],
              "propertyEditorValues": {
                "back": {
                  "displayName": "Back"
                },
                "front": {
                  "displayName": "Front"
                }
              }
            },
            "low": {
              "description": "The low value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
              "type": "number",
              "value": null
            },
            "shortDesc": {
              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
              "type": "string",
              "value": null
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the reference object. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the reference object color attribute.",
              "type": "string",
              "value": null
            },
            "svgStyle": {
              "description": "The inline style to apply to the reference object. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the reference object color attribute.",
              "type": "object",
              "value": null
            },
            "text": {
              "description": "The text displayed in the legend for the reference object.",
              "type": "string",
              "value": null,
              "translatable": true
            },
            "type": {
              "description": "The type of reference object being shown.",
              "type": "string",
              "value": "line",
              "enumValues": [
                "area",
                "line"
              ],
              "propertyEditorValues": {
                "area": {
                  "displayName": "Area"
                },
                "line": {
                  "displayName": "Line"
                }
              }
            },
            "value": {
              "description": "The value of a reference line. This property defines a constant value across the entire reference line and is ignored if the items array is specified.",
              "type": "number",
              "value": null
            }
          }
        },
        "rendered": {
          "description": "Defines whether the axis is rendered.",
          "type": "string",
          "value": "on",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "scale": {
          "description": "Defines the axis scale. Only applies to numerical axes.",
          "type": "string",
          "value": "linear",
          "enumValues": [
            "linear",
            "log"
          ],
          "propertyEditorValues": {
            "linear": {
              "displayName": "Linear"
            },
            "log": {
              "displayName": "Log"
            }
          }
        },
        "size": {
          "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
          "type": "string",
          "value": null
        },
        "step": {
          "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. For log axis, the step is a multiplier, so for example, if the step is 2, the major tick marks will be rendered at 1, 2, 4, 8, and so on.",
          "type": "number",
          "value": null,
          "exclusiveMinimum": 0
        },
        "tickLabel": {
          "description": "An object defining the properties of the tick labels.",
          "type": "object",
          "value": {},
          "properties": {
            "converter": {
              "description": "The converter (an object literal or instance that duck types oj.Converter) to format the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "object",
              "value": null
            },
            "position": {
              "description": "Defines the position of the tick labels relative to the plot area. Inside position is not supported for scatter and bubble charts.",
              "type": "string",
              "value": "outside",
              "enumValues": [
                "inside",
                "outside"
              ],
              "propertyEditorValues": {
                "inside": {
                  "displayName": "Inside"
                },
                "outside": {
                  "displayName": "Outside"
                }
              }
            },
            "rendered": {
              "description": "Defines whether the tick labels are rendered.",
              "type": "string",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scaling": {
              "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "style": {
              "description": "The CSS style object defining the style of the labels.",
              "type": "object",
              "value": {}
            }
          }
        },
        "title": {
          "description": "The axis title. Does not apply to polar charts.",
          "type": "string",
          "value": null,
          "translatable": true
        },
        "titleStyle": {
          "description": "The CSS style object defining the style of the axis title.",
          "type": "object",
          "value": {}
        },
        "viewportMax": {
          "description": "Specifies the maximum y coordinate of the current viewport for zoom and scroll. Only applies to bubble and scatter charts. If not specified, this value will be the axis max.",
          "type": "number",
          "value": null
        },
        "viewportMin": {
          "description": "Specifies the minimum y coordinate of the current viewport for zoom and scroll. Only applies to bubble and scatter charts. If not specified, this value will be the axis min.",
          "type": "number",
          "value": null
        }
      }
    },
    "zoomAndScroll": {
      "description": "Specifies the zoom and scroll behavior of the chart. \"Live\" behavior means that the chart will be updated continuously as it is being manipulated, while \"delayed\" means that the update will wait until the zoom/scroll action is done. While \"live\" zoom and scroll provides the best end user experience, no guarantess are made about the rendering performance or usability for large data sets or slow client environments. If performance is an issue, \"delayed\" zoom and scroll should be used instead.",
      "type": "string",
      "displayName": "Zoom And Scroll",
      "value": "off",
      "enumValues": [
        "delayed",
        "delayedScrollOnly",
        "live",
        "liveScrollOnly",
        "off"
      ],
      "propertyEditorValues": {
        "delayed": {
          "displayName": "Delayed"
        },
        "delayedScrollOnly": {
          "displayName": "Delayed Scroll Only"
        },
        "live": {
          "displayName": "Live"
        },
        "liveScrollOnly": {
          "displayName": "Live Scroll Only"
        },
        "off": {
          "displayName": "Off"
        }
      }
    },
    "zoomDirection": {
      "description": "Specifies the zoom direction of bubble and scatter charts. \"Auto\" zooms in both x and y direction. Use \"x\" or \"y\" for single direction zooming.",
      "type": "string",
      "displayName": "Zoom Direction",
      "value": "auto",
      "enumValues": [
        "auto",
        "x",
        "y"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "x": {
          "displayName": "X"
        },
        "y": {
          "displayName": "Y"
        }
      }
    }
  },
  "methods": {
    "getGroup": {
      "description": "Returns the group corresponding to the given index",
      "params": [
        {
          "name": "groupIndex",
          "description": "the group index",
          "type": "String"
        }
      ],
      "return": "String"
    },
    "getSeries": {
      "description": "Returns the series corresponding to the given index",
      "params": [
        {
          "name": "seriesIndex",
          "description": "the series index",
          "type": "String"
        }
      ],
      "return": "String"
    },
    "getGroupCount": {
      "description": "Returns number of groups in the chart data",
      "return": "Number"
    },
    "getSeriesCount": {
      "description": "Returns number of series in the chart data",
      "return": "Number"
    },
    "getDataItem": {
      "description": "Returns an object with the following properties for automation testing verification of the data item with\nthe specified series and group indices.",
      "params": [
        {
          "name": "seriesIndex",
          "description": "",
          "type": "number"
        },
        {
          "name": "groupIndex",
          "description": "",
          "type": "number"
        }
      ],
      "return": "Object|null"
    },
    "getLegend": {
      "description": "Returns an object with the following properties for automation testing verification of the chart legend.",
      "return": "Object"
    },
    "getPlotArea": {
      "description": "Returns an object with the following properties for automation testing verification of the chart plot area.",
      "return": "Object"
    },
    "getXAxis": {
      "description": "Returns an object with the following properties for automation testing verification of the x axis.",
      "return": "Object"
    },
    "getYAxis": {
      "description": "Returns an object with the following properties for automation testing verification of the y axis.",
      "return": "Object"
    },
    "getY2Axis": {
      "description": "Returns an object with the following properties for automation testing verification of the y2 axis.",
      "return": "Object"
    },
    "getValuesAt": {
      "description": "Returns the x, y, and y2 axis values at the specified X and Y coordinate.",
      "params": [
        {
          "name": "x",
          "description": "The X coordinate relative to the component.",
          "type": "Number"
        },
        {
          "name": "y",
          "description": "The Y coordinate relative to the component.",
          "type": "Number"
        }
      ],
      "return": "Object"
    },
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node,\ndefined as the 'subId' property on the context object. Additional component specific information may also be included.\n\nFor more details on returned objects, see context objects.",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "Object|null"
    },
    "refresh": {
      "description": "Refreshes the component."
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    }
  },
  "events": {
    "ojSelectInput": {
      "description": "Triggered during a selection gesture, such as a change in the marquee selection rectangle.",
      "bubbles": true,
      "detail": {
        "items": {
          "description": "an array containing the string ids of the selected data items",
          "type": "Array"
        },
        "selectionData": {
          "description": "an array containing objects describing the selected data items",
          "type": "Array",
          "properties": {
            "data": {
              "description": "the data of the item, if one was specified",
              "type": "object"
            },
            "groupData": {
              "description": "the group data of the item",
              "type": "Array"
            },
            "seriesData": {
              "description": "the series data of the item",
              "type": "object"
            }
          }
        },
        "endGroup": {
          "description": "the end group of a marquee selection on a chart with categorical axis",
          "type": "string"
        },
        "startGroup": {
          "description": "the start group of a marquee selection on a chart with categorical axis",
          "type": "string"
        },
        "xMax": {
          "description": "the maximum x value of a marquee selection",
          "type": "number"
        },
        "xMin": {
          "description": "the minimum x value of a marquee selection",
          "type": "number"
        },
        "yMax": {
          "description": "the maximum y value of a marquee selection",
          "type": "number"
        },
        "yMin": {
          "description": "the minimum y value of a marquee selection",
          "type": "number"
        }
      }
    },
    "ojViewportChange": {
      "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
      "bubbles": true,
      "detail": {
        "endGroup": {
          "description": "the end group of the new viewport on a chart with categorical axis",
          "type": "string"
        },
        "startGroup": {
          "description": "the start group of the new viewport on a chart with categorical axis",
          "type": "string"
        },
        "xMax": {
          "description": "the maximum x value of the new viewport",
          "type": "number"
        },
        "xMin": {
          "description": "the minimum x value of the new viewport",
          "type": "number"
        },
        "yMax": {
          "description": "the maximum y value of the new viewport",
          "type": "number"
        },
        "yMin": {
          "description": "the minimum y value of the new viewport",
          "type": "number"
        }
      }
    },
    "ojViewportChangeInput": {
      "description": "Triggered during a viewport change gesture, such as a drag operation on the overview window. Note: There are\nsituations where the chart cannot determine whether the viewport change gesture is still in progress, such\nas with mouse wheel zoom interactions. Standard viewportChange events are fired in these cases.",
      "bubbles": true,
      "detail": {
        "endGroup": {
          "description": "the end group of the new viewport on a chart with categorical axis",
          "type": "string"
        },
        "startGroup": {
          "description": "the start group of the new viewport on a chart with categorical axis",
          "type": "string"
        },
        "xMax": {
          "description": "the maximum x value of the new viewport",
          "type": "number"
        },
        "xMin": {
          "description": "the minimum x value of the new viewport",
          "type": "number"
        },
        "yMax": {
          "description": "the maximum y value of the new viewport",
          "type": "number"
        },
        "yMin": {
          "description": "the minimum y value of the new viewport",
          "type": "number"
        }
      }
    },
    "ojDrill": {
      "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
      "bubbles": true,
      "detail": {
        "id": {
          "description": "the id of the drilled object",
          "type": "string"
        },
        "series": {
          "description": "the series id of the drilled object, if applicable",
          "type": "string"
        },
        "group": {
          "description": "the group id of the drilled object, if applicable",
          "type": "string"
        },
        "data": {
          "description": "the data object of the drilled item",
          "type": "Object"
        },
        "seriesData": {
          "description": "the data for the series of the drilled object",
          "type": "Object"
        },
        "groupData": {
          "description": "an array of data for the group the drilled object belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the drilled object",
          "type": "Array"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}