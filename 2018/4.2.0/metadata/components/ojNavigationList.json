{
  "name": "oj-navigation-list",
  "version": "4.2.0",
  "jetVersion": "4.2.0",
  "displayName": "Navigation List",
  "preview": true,
  "styleClasses": [
    {
      "styleGroup": [
        "oj-navigationlist-stack-icon-label"
      ],
      "description": "Displays horizontal Navigation List with icon and label stacked. Applicable only when \"edge\" is \"top\"."
    },
    {
      "styleGroup": [
        "oj-navigationlist-category-divider"
      ],
      "description": "Use this class to add horizontal divider line between two categories of items."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-icon"
      ],
      "description": "Use this class to add icon to list item."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-title"
      ],
      "description": "When arbitrary content is placed inside item's content area, it's title text can be marked using this style class. This helps component in identifying the Item's label."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-text-wrap"
      ],
      "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when \"overflow\" attribute is set to \"popup\"."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-dividers"
      ],
      "description": "Use this class to show dividers between horizontal navigation list items."
    },
    {
      "styleGroup": [
        "oj-sm-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on small screens and larger."
    },
    {
      "styleGroup": [
        "oj-md-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on medium screens and larger."
    },
    {
      "styleGroup": [
        "oj-lg-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on large screens and larger."
    },
    {
      "styleGroup": [
        "oj-xl-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on extra large screens and larger."
    },
    {
      "styleGroup": [
        "oj-navigationlist-nofollow-link"
      ],
      "description": "Use this class to prevent automatic navigation to the url specified on \"&lt;a\n\" tag's \"href\" attribute. In this case, navigation can be handled programmatically by using \"selectionChanged\" event. This is useful to execute some custom logic before browser triggers navigation."
    },
    {
      "styleGroup": [
        "oj-focus-highlight"
      ],
      "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control.\nThe \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load.\nThe application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are:\n\"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value.\n\"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism.\n\"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result.\nTo change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
    }
  ],
  "description": "JET Navigation List enhances a HTML list element into a themable, WAI-ARIA compliant, mobile friendly component with advance interactive features",
  "properties": {
    "currentItem": {
      "description": "Gets and sets the key of the item that should have keyboard focus.",
      "type": "*",
      "displayName": "Current Item",
      "value": null,
      "writeback": true
    },
    "data": {
      "description": "Gets and sets the data provider for Navigation List.",
      "type": "oj.TableDataSource|oj.TreeDataSource",
      "displayName": "Data",
      "value": null
    },
    "display": {
      "description": "Gets and sets whether all or only icons need to be displayed.",
      "type": "string",
      "displayName": "Display",
      "value": "all",
      "enumValues": [
        "all",
        "icons"
      ],
      "propertyEditorValues": {
        "all": {
          "description": "Display both the label and icons.",
          "displayName": "All"
        },
        "icons": {
          "description": "Display only the icons.",
          "displayName": "Icons"
        }
      }
    },
    "drillMode": {
      "description": "Gets and sets whether expand/collapse or sliding operations are allowed.",
      "type": "string",
      "displayName": "Drill Mode",
      "value": "none",
      "enumValues": [
        "collapsible",
        "none",
        "sliding"
      ],
      "propertyEditorValues": {
        "collapsible": {
          "description": "Allows user to expand and collapse group items. If there are more than two levels in hierarchy, sliding is preferered drill mode.",
          "displayName": "Collapsible"
        },
        "none": {
          "description": "All group items are expanded by default and user not allowed to collapse them.",
          "displayName": "None"
        },
        "sliding": {
          "description": "This is typically used for hierarchical lists. This allows user to view one level at a time.",
          "displayName": "Sliding"
        }
      }
    },
    "edge": {
      "description": "Gets and sets the edge position of the Navigation List.",
      "type": "string",
      "displayName": "Edge",
      "value": "start",
      "enumValues": [
        "start",
        "top"
      ],
      "propertyEditorValues": {
        "start": {
          "description": "This renders list items vertically.",
          "displayName": "Start"
        },
        "top": {
          "description": "This renders list items horizontally.",
          "displayName": "Top"
        }
      }
    },
    "hierarchyMenuThreshold": {
      "description": "Gets and sets the level at which user can see hierarchical menu button (defaults to 0 if not specified in theme).",
      "type": "number",
      "displayName": "Hierarchy Menu Threshold",
      "value": 0
    },
    "item": {
      "description": "Customize the functionalities of each item in Navigation List.",
      "type": "",
      "displayName": "Item",
      "properties": {
        "renderer": {
          "description": "Gets and sets the renderer for the item.",
          "type": "function|null",
          "value": null
        },
        "selectable": {
          "description": "Gets and sets whether the item can be selected.",
          "type": "function|boolean",
          "value": true
        }
      }
    },
    "overflow": {
      "description": "Gets and sets overflow behaviour for Navigation List.",
      "type": "string",
      "displayName": "Overflow",
      "value": "hidden",
      "enumValues": [
        "hidden",
        "popup"
      ],
      "propertyEditorValues": {
        "hidden": {
          "description": "overflow is clipped, and the rest of the content will be invisible.",
          "displayName": "Hidden"
        },
        "popup": {
          "description": "popup menu will be shown with overflowed items. NOTE: Setting overflow to popup can trigger browser reflow, so only set it when it is actually required.",
          "displayName": "Popup"
        }
      }
    },
    "rootLabel": {
      "description": "Gets and sets the label for top level list items.",
      "type": "string",
      "displayName": "Root Label",
      "value": "Navigation List"
    },
    "selection": {
      "description": "Gets and sets the key of the selected item.",
      "type": "*",
      "displayName": "Selection",
      "value": null,
      "writeback": true
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this\ncomponent has no resources. Resources may be accessed and overridden individually or collectively, as seen in the examples.\n\nIf this component has translations, their documentation immediately follows this doc entry.",
      "type": "Object",
      "displayName": "Translations",
      "value": null,
      "properties": {
        "defaultRootLabel": {
          "description": "Provides properties to customize the title text used by Sliding Navigation List for root node. \n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Navigation List"
        },
        "hierMenuBtnLabel": {
          "description": "Provides properties to customize the hover message text used by Sliding Navigation List as label for Hierarchical Menu button.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Hierarchical Menu button"
        },
        "previousIcon": {
          "description": "Provides properties to customize the hover message text used by Sliding Navigation List for previous button.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "value": "Previous"
        }
      }
    }
  },
  "methods": {
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node,\ndefined as the 'subId' property on the context object. Additional component specific information may also be included.\n\nFor more details on returned objects, see context objects.",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "Object|null"
    },
    "refresh": {
      "description": "Refreshes the visual state of the Navigation List. JET components require a refresh() after the DOM is programmatically changed underneath the component. This method does not accept any arguments."
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "*"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "*"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "Object"
        }
      ]
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Event handler for when the default animation of a particular action is about to start.",
      "detail": {
        "action": {
          "description": "the action that starts the animation. See animation section for a list of actions.",
          "type": "Object"
        },
        "element": {
          "description": "the target of animation.",
          "type": "Object"
        },
        "endCallback": {
          "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Event handler for when the default animation of a particular action has ended.",
      "detail": {
        "action": {
          "description": "the action that started the animation. See animation section for a list of actions.",
          "type": "Object"
        },
        "element": {
          "description": "the target of animation.",
          "type": "Object"
        }
      }
    },
    "ojBeforeSelect": {
      "description": "Event handler for when before the selection is changed.",
      "cancelable": true,
      "detail": {
        "key": {
          "description": "Selected list item Key.",
          "type": "*"
        },
        "item": {
          "description": "Selected list item.",
          "type": "Element"
        }
      }
    },
    "ojBeforeCollapse": {
      "description": "Event handler for when an item is about to collapse.",
      "cancelable": true,
      "detail": {
        "key": {
          "description": "the Key of the item to be collapse",
          "type": "*"
        },
        "item": {
          "description": "the item to be collapse",
          "type": "Element"
        }
      }
    },
    "ojBeforeCurrentItem": {
      "description": "Event handler for when before the current item is changed.",
      "cancelable": true,
      "detail": {
        "previousKey": {
          "description": "the Key of the previous item",
          "type": "*"
        },
        "previousItem": {
          "description": "the previous item",
          "type": "Element"
        },
        "key": {
          "description": "the Key of the new current item",
          "type": "*"
        },
        "item": {
          "description": "the new current item",
          "type": "Element"
        }
      }
    },
    "ojCollapse": {
      "description": "Event handler for after an item has collapsed.",
      "detail": {
        "key": {
          "description": "The Key of the item that was just collapsed.",
          "type": "*"
        },
        "item": {
          "description": "The list item that was just collapsed.",
          "type": "Element"
        }
      }
    },
    "ojBeforeExpand": {
      "description": "Event handler for when an item is about to expand.",
      "cancelable": true,
      "detail": {
        "key": {
          "description": "the Key of the item to be expand",
          "type": "*"
        },
        "item": {
          "description": "the item to be expand",
          "type": "Element"
        }
      }
    },
    "ojExpand": {
      "description": "Event handler for after an item has expanded.",
      "detail": {
        "key": {
          "description": "The Key of the item that was just expanded.",
          "type": "*"
        },
        "item": {
          "description": "The list item that was just expanded.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}