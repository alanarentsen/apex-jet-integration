// Copyright (c) 2014, 2018, Oracle and/or its affiliates. The Universal Permissive License (UPL), Version 1.0
@import "../../utilities/oj.utilities";

// Css FormLayout utility selectors
@include module-include-once("common.formlayout.utilities") {

  // The technique used in these column classes use css multi column layout.
  // http://dev.w3.org/csswg/css-multicol/ 
  // With this layout the columns should automatically be 
  // approximately the same heights.
  .oj-form-cols-labels-inline { 
    @include oj-column-width-property($formLayoutLabelsInlineColumnWidth);
    @include oj-column-gap-property($formLayoutLabelsInlineColumnGap);
  } 

  .oj-form-cols { 
    @include oj-column-width-property($formLayoutColumnWidth);
    @include oj-column-gap-property($formLayoutColumnGap);
  } 

  // set the max number of columns to 2
  .oj-form-cols-max2 { 
    @include oj-column-count-property(2);
  } 

  // without controlling breaking then in some cases a label will 
  // show up in the first column but its associated field will show 
  // up in the second column.
  .oj-form-cols > .oj-flex,
  .oj-form-cols-labels-inline > .oj-flex { 
    @include oj-break-inside-property(avoid);
    // page-break-inside is needed for FF 24, the col break written 
    // out by the mixin doesn't work
    page-break-inside: avoid; 
  } 



  // headers inside a form layout have different margins than regular headers
  .oj-form > hr,
  .oj-form > h1,
  .oj-form > h2,
  .oj-form > h3,
  .oj-form > h4 {
    // the margins above and below are 15px, but there's
    // already the formlayout margin bottom above, so subtract that
    // from the top
    margin: (15px - $formLayoutMarginBottom) 0 15px 0;
  }


  //
  // Stacked (non-responsive) form layout
  //

  .oj-form > .oj-form-control,
  .oj-form > .oj-form-non-control {
    margin-bottom: $formLayoutMarginBottom;
  }

  // in some cases form controls are grouped together with the 
  // oj-form-control-group class, in that case you need
  // to subtract wrappableMarginBottom
  .oj-form > .oj-form-control-group {
    margin-bottom: ($formLayoutMarginBottom - $wrappableMarginBottom);
  }

  // This keeps the form controls lined up in case one has an inline message.
  .oj-form-control-group .oj-form-control {
    vertical-align: top;
  }


  // when a form is nested reset the text align to start, otherwise the field's
  // text-align property will be inherited
  .oj-form > .oj-flex > .oj-flex-item > .oj-form{
    @include oj-bidi-property(
         $property: 'text-align', 
         $startOrEnd: start);
  }


  // Originally the margin was on .oj-form .oj-flex. However there was a problem. 
  // In the "across" form layout there's 4 grid cells in a row. 
  // On large screens these 4 cells are all on one line. 
  // But on medium screens the first 2 cells stay on the 
  // first line and the second 2 cells wrap to a new line 
  // to create a second "row". However there's no actual row 
  // class in this case, so the margins need to be on the field columns.
  //
  // The :last-child is to handle cases where there is a colspan
  // across all the cells.
  //
  // See the form layout demo titled "inline responsive across" 
  // before checking in any changes to where the margin is placed.
  .oj-form > .oj-flex > .oj-flex-item:nth-child(even),
  .oj-form > .oj-flex > .oj-flex-item:last-child {
    margin: 0 0 ($formLayoutMarginBottom - $wrappableMarginBottom) 0;
  }

  .oj-form > .oj-flex > .oj-flex-item > .oj-form-non-control {
    margin-bottom: $wrappableMarginBottom;
  }



  // borders around the form
  @if $formLayoutBorderColor != null and $formLayoutBorderColor != transparent {
    .oj-form-layout {
      border-color: $formLayoutBorderColor;
      border-style: solid;
      border-width: 1px 0 0;
    }

    .oj-form-layout-inset {
      // todo: use vars from Amy's padding classes?
      margin: 12px;
      border-width: 1px;
    }
  }

  // dividers between rows
  @if  $formLayoutDividerColor != null and $formLayoutDividerColor != transparent {
    .oj-form > .oj-flex {
      border-style: solid;
      border-color: $formLayoutDividerColor;
      border-width: 0 0 1px 0;
      padding: $formLayoutMarginBottom 0 0;
    }

    // no border on the last row
    .oj-form > .oj-flex:last-child{
      border-width: 0;
    }

    // Ideally when you have multiple columns there wouldn't be 
    // divider under the last item in each column. However
    // on layouts using the css multi column layout we don't know
    // when there's multiple columns, so we need to put a border
    // on the last item, otherwise when there's multiple columns the 
    // first column has a divider on the bottom, but the second column doesn't.
    .oj-form-layout > .oj-form[class*="oj-form-cols-"] > .oj-flex:last-child {
      border-width: 0 0 1px 0;
    }

    .oj-form-no-dividers > .oj-flex,
    .oj-form-layout > .oj-form-no-dividers[class*="oj-form-cols-"] > .oj-flex:last-child,
    .oj-form-layout > .oj-flex-item > .oj-form-no-dividers > .oj-flex:last-child {
      border-width: 0;
    }
  }
}