// Copyright (c) 2014, 2018, Oracle and/or its affiliates. The Universal Permissive License (UPL), Version 1.0
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the 
//          version in your base theme's directory, 
//          for example alta/widgets/_oj.alta.dialog.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@import "../../utilities/oj.utilities";

@if $includeDialogClasses != false {
  @include module-include-once("common.dialog") {
    
    /* dialog */
    /* --------------------------------------------------------------- */
    
    // This is to prevent the flash of unstyled content before the html becomes JET components.
    @if $initialVisibility == hidden {
      oj-dialog:not(.oj-complete) {
        visibility: hidden;
      }      
    }
    
    /* defines the stacking context of the dialog and for it's children '**/
    .oj-dialog-layer {
       @extend .oj-component-layer;
       z-index: $dialogZindex;
    }    
 
    .oj-dialog-layer.oj-focus-within {
      z-index: $dialogZindex + 1;
    }

    .oj-dialog {
      @extend .oj-component-popup;
      overflow:hidden;
      width: 300px;
      min-width: 200px;
      height: auto;
      // note: min-height overrides height auto, so do not 
      //       specify min-height in combination with height:auto
      box-sizing: border-box;
      @include oj-display-flex-property();
      // use flex direction column to achieve a sticky footer
      @include oj-flex-direction-property(column);
      @include oj-box-shadow($dialogBoxShadow);
      background: $dialogBgColor;
      border: $dialogBorderWidth solid $dialogBorderColor;
      @include oj-border-radius($dialogBorderRadius);
    }

    .oj-dialog-header {     
      // the height of any bottom padding put on here plus the height of the close icon
      // would make the header too tall. Therefore the bottom padding is put on the title,
      // see the bottom margin in .oj-dialog-title
      padding: $dialogHeaderPadding;
      background-color: $dialogHeaderBgColor;
      @include oj-background-image($dialogHeaderBgImage);
      border-width: 0 0 1px 0;
      border-style: solid;
      border-bottom-color: $dialogHeaderBorderColor;
      font-size: $dialogHeaderFontSize;
      color: $dialogHeaderTextColor;
      font-weight: $headerFontWeight;
      position: relative;
    }

    .oj-draggable .oj-dialog-header,
    .oj-draggable .oj-dialog-title { 
      cursor: move; 
    }

    // Vertically align the body with the close icon. 
    // Adjust horizontal padding so that a centered title does not collide with the close icon.
    @if $dialogCloseIconPosition == top or $dialogCloseIconPosition == center {
      // adjust margins so the the close button is positioned
      // at the end of the dialog
     .oj-dialog-header-close-wrapper { 
        $dialogPaddingSide: oj-shorthand-property-value-left($dialogHeaderPadding);
        @include oj-ltr() {
          margin-right: (-$dialogPaddingSide);
          float: right;
        }
        @include oj-rtl() {    
          margin-left: (-$dialogPaddingSide);
          float: left;
        }
      }
    }

    @if $dialogCloseIconPosition == top {
      // adjust margins so the the close button is vertically positioned
      // in the top of the dialog header.
      .oj-dialog-header-close-wrapper + .oj-dialog-title {
        padding-top: $buttonHeight - oj-shorthand-property-value-top($dialogHeaderPadding);
      }   
     .oj-dialog-header-close-wrapper { 
        margin-top: (- oj-shorthand-property-value-top($dialogHeaderPadding));
      }
    } @else if $dialogCloseIconPosition == center {
      // adjust margins so the the close button is vertically positioned
      // in the center of the dialog header.
     .oj-dialog-header-close-wrapper { 
        margin-bottom: (- oj-shorthand-property-value-top($dialogHeaderPadding));
      }
    }

    // 
    // Use to control margin adjustments on close buttons' icon.
    // 
    .oj-dialog-header-close-wrapper.oj-button-icon-only .oj-button-icon  {
        margin: $dialogCloseIconButtonMargin;
     }

    .oj-dialog-title {
      display: block;
      overflow: hidden;
      cursor: default;
      @include oj-user-select-property (none);
    }

    @if $dialogHeaderTextAlign == center {
      // 
      // The 'center' setting will center the dialog header text.
      // To achieve a centered title for dialogs that have
      // a close icon, we pad the side that does not have a close icon.
      // 
      .oj-dialog-title {
          text-align: center;
       }   
       // Adjust margin between the close button and the title so that
       // the title remains centered.
      .oj-dialog-header-close-wrapper + .oj-dialog-title {
           $dialogPaddingSide: oj-shorthand-property-value-left($dialogBodyPadding);
           @include oj-ltr() {    
           padding-left: $buttonHeight - $dialogPaddingSide;
          } 
         @include oj-rtl() {    
           padding-right: $buttonHeight - $dialogPaddingSide;
        }
      }
     }

    // Padding between the dialog title and the close icon
    .oj-dialog-header-close-wrapper + .oj-dialog-title {
      @include oj-ltr() {
         padding-right: .2rem;
      }
      @include oj-rtl() {    
         padding-left: .2rem;
      }
    }

    .oj-dialog-content > p:last-child {
       margin-bottom: 0;
     }

    .oj-dialog-content {
       overflow: auto;
       position: relative;
       // enable momentum based scrolling for touch devices
       -webkit-overflow-scrolling: touch;
       // configure the dialog content to grow and shrink on resize
       @include oj-flex-property(1 1 auto);
     }

    .oj-dialog-body { 
      position: relative; 
      overflow: auto;   
      box-sizing: border-box;
      padding: $dialogBodyPadding;
      text-align: $dialogBodyTextAlign;
    }

   // optional footer separator
   //------------------------------------------
    .oj-dialog-footer-separator {
      border-top: 1px solid $dialogFooterDividerColor;
    }   

    .oj-dialog-footer {
      display: flex;
      justify-content: flex-end;
      // Configure the footer content to be fixed height on resize.
      @include oj-flex-property(0 0 auto);
      padding: $dialogFooterPadding;
      @include oj-ltr() {
         text-align: right;
      }
      @include oj-rtl() {    
         text-align: left;
      }
    }

    .oj-dialog-footer .oj-button {
      height: $dialogFooterButtonHeight;
      font-weight: $dialogFooterButtonFontWeight;
      margin-left: $spacingSmall; // creates horizontal space between footer buttons
    }                           

    @if $dialogFooterIntegrateButtons == true {
      //
      // With this setting, buttons are integrated (spread) across the entire footer.
      // In addition:
      //   - there is a dividing line above the footer
      //   - there are dividing lines between the buttons
      //   - the first and last buttons have rounded corners
      // 
      .oj-dialog-footer {
        border-top: 1px solid $dialogFooterDividerColor;
      }

      .oj-dialog-footer > .oj-button,
      .oj-dialog-footer > .oj-button.oj-active,
      .oj-dialog-footer > .oj-button.oj-active.oj-focus,
      .oj-dialog-footer > .oj-button > .oj-button-button {
        margin: 0;
        flex:1;
        @include oj-ltr() {
          border-color: transparent transparent transparent $dialogFooterDividerColor;
        }
        @include oj-rtl() { 
          border-color: transparent $dialogFooterDividerColor transparent transparent;
        }
      }

      // Define radius of the first button
      .oj-dialog-footer > .oj-button:first-child {
        @include oj-ltr() {
          border-left-color: transparent;
          @include oj-border-radius(0 0 0 $dialogBorderRadius);
        }
        @include oj-rtl() {
          border-right-color: transparent;
          @include oj-border-radius(0 0 $dialogBorderRadius 0);
        }
      }

      // Define radius of the last button
      .oj-dialog-footer > .oj-button:last-child {
        @include oj-ltr() {
          @include oj-border-radius(0 0 $dialogBorderRadius 0);
        }
        @include oj-rtl() {
          @include oj-border-radius(0 0 0 $dialogBorderRadius);
        }     
      }
    } 

   // Disable Chrome's automatic blue outline on the dialog container,
   // the close wrapper, and the close icon.
   .oj-dialog:focus, .oj-dialog-header-close-wrapper:focus {
     outline:none;
   }

   // The oj-focus-highlight class applies focus styling that may not be desirable
   // when the focus results from pointer interaction (touch or mouse), but which is
   // needed for accessibility when the focus occurs by a non-pointer mechanism, for
   // example keyboard or initial page load. See also the $focusHighlightPolicy variable,
   // which controls when this class is set.
   // Apply this to the dialog container and the close wrapper.
  .oj-dialog.oj-focus-highlight,
  .oj-dialog-header-close-wrapper.oj-focus-highlight {
      @include oj-browser-focus-outline-approximation($primaryTextColor);
   }

  // 
  // In order to support the proper stacking context for animated nested dialogs,
  // we use the following selector to set the z-index of the animating dialog to
  // the top of the stack. Note that the dialog component adds the oj-animate-open
  // class when a dialog is animating during dialog open.
  // 
 .oj-dialog-layer.oj-focus-within,
 .oj-dialog-layer.oj-animate-open {
    z-index: $dialogZindex + 1;
  } 

  // icons
  //------------------------------------------

    .oj-dialog-close-icon { 
       @extend .oj-fwk-icon-cross;
    }

    // DIALOG animation defaults
    //----------------------------------
    $dialogAnimationDefaults: ();
 
    @if ($dialogOpenAnimation) {
      $dialogAnimationDefaults: map-merge($dialogAnimationDefaults, (open: $dialogOpenAnimation));
    }
 
    @if ($dialogCloseAnimation) {
      $dialogAnimationDefaults: map-merge($dialogAnimationDefaults, (close: $dialogCloseAnimation));
    }
    
    // option defaults
    //----------------------------------
    $dialogDefaultOptions: ();
 
    @if ($dialogAnimationDefaults) {
      $dialogDefaultOptions: map-merge($dialogDefaultOptions, (animation: $dialogAnimationDefaults));
    }

    @if ($dialogResizeBehaviorOptionDefault) {
      $dialogDefaultOptions: map-merge($dialogDefaultOptions, (resizeBehavior: $dialogResizeBehaviorOptionDefault));
    }
 
    @if ($dialogCancelBehaviorOptionDefault) {
      $dialogDefaultOptions: map-merge($dialogDefaultOptions, (cancelBehavior: $dialogCancelBehaviorOptionDefault));
    }
    
    @if ($dialogDragAffordanceOptionDefault) {
      $dialogDefaultOptions: map-merge($dialogDefaultOptions, (dragAffordance: $dialogDragAffordanceOptionDefault));
    }

    // component default options selector 
    .oj-dialog-option-defaults {
      font-family: oj-json-from-map($dialogDefaultOptions);
    }

  }
}
